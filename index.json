[{"authors":["admin"],"categories":null,"content":"Computer Science Student from Germany interested in Data Science.\n","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"/author/max-hubner/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/max-hubner/","section":"authors","summary":"Computer Science Student from Germany interested in Data Science.","tags":null,"title":"Max Hübner","type":"authors"},{"authors":[],"categories":["R","Webscraping"],"content":"\r\rEvery year I try to compare the rankings on the fantasy football site I play on with consensus expert rankings in order to find exploits.\nIf a player is goes way earlier than he is evalued by experts, I will probably not draft him at all as it is not a good value.\nIf a player goes way later than projected by experts, I will maybe draft him, but I might get him later than I should be, hence the name Draft Bargain.\nIn this post we will compare the consensus Expert Ranking on FantasyPros with the previously scraped in-draft rankings from Sleeper. If you want to know how to do this, read my latest blog post.\nData Gathering\rFirst, we should load our scraped mock ranks. Since we are only interested in skill positions and Quaterbacks, we remove everything else.\nsleeper_ranks \u0026lt;- read_csv(\u0026quot;https://maxhuebner.github.io/post/data/sleeper-mock-ranks-2020-08-18.csv\u0026quot;) %\u0026gt;% filter((pos %in% c(\u0026quot;QB\u0026quot;,\u0026quot;RB\u0026quot;,\u0026quot;WR\u0026quot;,\u0026quot;TE\u0026quot;)))\rNext, we need data to compare. Let’s scrape the data from the FantasyPros-website using the package rvest. The Data is stored in a \u0026lt;table\u0026gt; tag so we can us rvest’s function html_table().\nfantasypros_url \u0026lt;- \u0026quot;https://www.fantasypros.com/nfl/rankings/half-point-ppr-cheatsheets.php\u0026quot;\rfp_html \u0026lt;- read_html(fantasypros_url) %\u0026gt;% html_table(fill = T) %\u0026gt;% .[[1]] %\u0026gt;% as_tibble() %\u0026gt;% janitor::clean_names()\rfp_html\r## # A tibble: 510 x 12\r## rank wsid overall_team pos bye best worst avg std_dev adp vs_adp\r## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; ## 1 \u0026amp;nbsp \u0026quot;\u0026amp;nb~ \u0026quot;\u0026amp;nbsp\u0026quot; \u0026quot;\u0026amp;nb~ \u0026quot;\u0026amp;nb~ \u0026quot;\u0026amp;nb~ \u0026quot;\u0026amp;nb~ \u0026quot;\u0026amp;nb~ \u0026quot;\u0026amp;nbsp\u0026quot; \u0026quot;\u0026amp;nb~ \u0026quot;\u0026amp;nbs~\r## 2 Tier~ \u0026quot;\u0026quot; \u0026quot;\u0026quot; \u0026quot;\u0026quot; \u0026quot;\u0026quot; \u0026quot;\u0026quot; \u0026quot;\u0026quot; \u0026quot;\u0026quot; \u0026quot;\u0026quot; \u0026quot;\u0026quot; \u0026quot;\u0026quot; ## 3 1 \u0026quot;\u0026quot; \u0026quot;Christian ~ \u0026quot;RB1\u0026quot; \u0026quot;13\u0026quot; \u0026quot;1\u0026quot; \u0026quot;4\u0026quot; \u0026quot;1.1\u0026quot; \u0026quot;0.3\u0026quot; \u0026quot;1.0\u0026quot; \u0026quot;0.0\u0026quot; ## 4 2 \u0026quot;\u0026quot; \u0026quot;Saquon Bar~ \u0026quot;RB2\u0026quot; \u0026quot;11\u0026quot; \u0026quot;1\u0026quot; \u0026quot;5\u0026quot; \u0026quot;2.1\u0026quot; \u0026quot;0.5\u0026quot; \u0026quot;2.0\u0026quot; \u0026quot;0.0\u0026quot; ## 5 3 \u0026quot;\u0026quot; \u0026quot;Ezekiel El~ \u0026quot;RB3\u0026quot; \u0026quot;10\u0026quot; \u0026quot;2\u0026quot; \u0026quot;17\u0026quot; \u0026quot;3.5\u0026quot; \u0026quot;1.7\u0026quot; \u0026quot;3.0\u0026quot; \u0026quot;0.0\u0026quot; ## 6 4 \u0026quot;\u0026quot; \u0026quot;Alvin Kama~ \u0026quot;RB4\u0026quot; \u0026quot;6\u0026quot; \u0026quot;3\u0026quot; \u0026quot;12\u0026quot; \u0026quot;4.7\u0026quot; \u0026quot;1.3\u0026quot; \u0026quot;5.0\u0026quot; \u0026quot;+1.0\u0026quot;\r## 7 5 \u0026quot;\u0026quot; \u0026quot;Michael Th~ \u0026quot;WR1\u0026quot; \u0026quot;6\u0026quot; \u0026quot;3\u0026quot; \u0026quot;14\u0026quot; \u0026quot;6.2\u0026quot; \u0026quot;2.6\u0026quot; \u0026quot;4.0\u0026quot; \u0026quot;-1.0\u0026quot;\r## 8 6 \u0026quot;\u0026quot; \u0026quot;Dalvin Coo~ \u0026quot;RB5\u0026quot; \u0026quot;7\u0026quot; \u0026quot;2\u0026quot; \u0026quot;21\u0026quot; \u0026quot;6.8\u0026quot; \u0026quot;2.5\u0026quot; \u0026quot;7.0\u0026quot; \u0026quot;+1.0\u0026quot;\r## 9 Tier~ \u0026quot;\u0026quot; \u0026quot;\u0026quot; \u0026quot;\u0026quot; \u0026quot;\u0026quot; \u0026quot;\u0026quot; \u0026quot;\u0026quot; \u0026quot;\u0026quot; \u0026quot;\u0026quot; \u0026quot;\u0026quot; \u0026quot;\u0026quot; ## 10 7 \u0026quot;\u0026quot; \u0026quot;Derrick He~ \u0026quot;RB6\u0026quot; \u0026quot;7\u0026quot; \u0026quot;2\u0026quot; \u0026quot;28\u0026quot; \u0026quot;8.3\u0026quot; \u0026quot;3.2\u0026quot; \u0026quot;6.0\u0026quot; \u0026quot;-1.0\u0026quot;\r## # ... with 500 more rows, and 1 more variable: notes \u0026lt;lgl\u0026gt;\rUnfortunately the data/table is not perfect, so we need to do a bit of data cleaning:\n- Get rid of rows with non numeric rows (as.numeric(rank) will make non numeric values NA)\r- Extract name by matching everything up to the . and trimming the last 2 characters\r- Extract position by removing the number\r- Extract the team by extracting at least two back to back capital letters (only team names matches this description)\nAfter that, we change a few outliers so that our data is acceptable.\nfp_ranks \u0026lt;- fp_html %\u0026gt;% mutate(rank = as.numeric(rank),\rname = str_extract(overall_team, \u0026quot;.*\\\\.\u0026quot;),\rname = str_sub(name, end = -3),\rpos = str_extract(pos, \u0026quot;[:upper:]*\u0026quot;),\rteam = str_extract(overall_team, \u0026quot;[:upper:]{2,}\u0026quot;)) %\u0026gt;% filter(!is.na(rank),\rpos %in% c(\u0026quot;QB\u0026quot;,\u0026quot;RB\u0026quot;,\u0026quot;WR\u0026quot;,\u0026quot;TE\u0026quot;)) %\u0026gt;% select(rank, name, pos, team) %\u0026gt;%\rmutate(team = if_else(team == \u0026quot;JAC\u0026quot;, \u0026quot;JAX\u0026quot;, team),\rteam = if_else(name == \u0026quot;Mark Ingram II\u0026quot;, \u0026quot;BAL\u0026quot;, team)) %\u0026gt;% add_count(team) %\u0026gt;% filter(n \u0026gt; 2) %\u0026gt;% select(-n)\rfp_ranks\r## # A tibble: 412 x 4\r## rank name pos team ## \u0026lt;dbl\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt;\r## 1 1 Christian McCaffrey RB CAR ## 2 2 Saquon Barkley RB NYG ## 3 3 Ezekiel Elliott RB DAL ## 4 4 Alvin Kamara RB NO ## 5 5 Michael Thomas WR NO ## 6 6 Dalvin Cook RB MIN ## 7 7 Derrick Henry RB TEN ## 8 8 Davante Adams WR GB ## 9 9 Joe Mixon RB CIN ## 10 10 Julio Jones WR ATL ## # ... with 402 more rows\r\rMerging Data\rIn order to compare the data we should merge it in a single data frame (or in this case tibble). We want to join by name, position and team so every player has a sleeper_rank and a fp_rank.\nThe only problem: The names don’t match up perfectly. To fix that we have to use the awesome package fuzzyjoin by David Robinson. We will also use the package stringdist\nlibrary(fuzzyjoin)\rlibrary(stringdist)\radp_tibble \u0026lt;- fp_ranks %\u0026gt;% fuzzy_left_join(sleeper_ranks,\rby = c(\u0026quot;pos\u0026quot;, \u0026quot;team\u0026quot;, \u0026quot;name\u0026quot;),\rlist(`==`,`==`,function(x,y) stringdist(tolower(x), tolower(y),\rmethod=\u0026quot;osa\u0026quot;) \u0026lt;= 6)) %\u0026gt;%\rselect(name = name.x, pos = pos.x, team = team.x,\rfp = rank.x, sleeper = rank.y) %\u0026gt;%\rfilter(!is.na(sleeper)) %\u0026gt;%\rmutate(diff = sleeper-fp,\rcategory = as.factor(ifelse(diff \u0026gt; 0, \u0026quot;Steal\u0026quot;, \u0026quot;Overhyped\u0026quot;))) %\u0026gt;% arrange(abs(diff)) %\u0026gt;% distinct(name, team, pos, .keep_all = T)\radp_tibble\r## # A tibble: 255 x 7\r## name pos team fp sleeper diff category ## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;fct\u0026gt; ## 1 Christian McCaffrey RB CAR 1 1 0 Overhyped\r## 2 Saquon Barkley RB NYG 2 2 0 Overhyped\r## 3 Joe Mixon RB CIN 9 9 0 Overhyped\r## 4 Kenyan Drake RB ARI 17 17 0 Overhyped\r## 5 Kareem Hunt RB CLE 62 62 0 Overhyped\r## 6 Matt Breida RB MIA 86 86 0 Overhyped\r## 7 Larry Fitzgerald WR ARI 183 183 0 Overhyped\r## 8 Brian Hill RB ATL 281 281 0 Overhyped\r## 9 Ezekiel Elliott RB DAL 3 4 1 Steal ## 10 Alvin Kamara RB NO 4 3 -1 Overhyped\r## # ... with 245 more rows\rWe have three join columns. This fuzzy_left_join() works the following way:\nJoin first and second column by exact match ==. Join third column (name) by a function that is true, if the stringdist of two names is less or equal 6.\nExample: stringdist(\"Patrick Mahomes\", \"Pat Mahomes\") would be 4, so it would still match our superstar quaterback. Difference of 6 seems like a lot, but we can’t match everyone with a smaller value and our overlap is minimal as well.\nWe will also calculate the difference in the rankings. Negative Value means the player goes too early on sleeper, positive means that we might be able to snatch him a bit later. We label the players accordingly in a new column category\n\rComparing Data\rAfter joining the data, we can analyze it. Nobody cares about sleepers that go after round 13 so we will only look at Top100 players (in either ranking)\nLIMIT \u0026lt;- 100\radp_compare \u0026lt;- adp_tibble %\u0026gt;% arrange(desc(abs(diff))) %\u0026gt;% filter(fp \u0026lt;= LIMIT | sleeper \u0026lt;= LIMIT)\rsteals \u0026lt;- adp_compare %\u0026gt;% filter(category == \u0026quot;Steal\u0026quot;) %\u0026gt;% select(-category)\roverhyped \u0026lt;- adp_compare %\u0026gt;% filter(category == \u0026quot;Overhyped\u0026quot;) %\u0026gt;% select(-category)\rsteals\r## # A tibble: 51 x 6\r## name pos team fp sleeper diff\r## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 Tarik Cohen RB CHI 88 120 32\r## 2 Tyler Higbee TE LAR 77 106 29\r## 3 Austin Hooper TE CLE 99 124 25\r## 4 Josh Allen QB BUF 70 89 19\r## 5 Matthew Stafford QB DET 90 109 19\r## 6 D.J. Moore WR CAR 30 47 17\r## 7 Odell Beckham Jr. WR CLE 31 48 17\r## 8 Courtland Sutton WR DEN 50 67 17\r## 9 Allen Robinson WR CHI 24 40 16\r## 10 DeVante Parker WR MIA 55 71 16\r## # ... with 41 more rows\roverhyped\r## # A tibble: 54 x 6\r## name pos team fp sleeper diff\r## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 Deebo Samuel WR SF 123 75 -48\r## 2 Mecole Hardman WR KC 147 100 -47\r## 3 Rob Gronkowski TE TB 107 72 -35\r## 4 Emmanuel Sanders WR NO 127 99 -28\r## 5 Marlon Mack RB IND 91 69 -22\r## 6 Alexander Mattison RB MIN 113 96 -17\r## 7 Aaron Rodgers QB GB 98 82 -16\r## 8 Sony Michel RB NE 109 93 -16\r## 9 David Montgomery RB CHI 52 37 -15\r## 10 Devin Singletary RB BUF 57 42 -15\r## # ... with 44 more rows\r\rCreating Tables\rWe now have two datasets steals and overhyped that contain the data we were interested in. However, it is not pleasant to look at the players in this format. Therefore we will create beatiful tables using the gt package.\nlibrary(gt)\r#Table Options Shared\rtable_init_with_options \u0026lt;- . %\u0026gt;% gt(groupname_col = \u0026quot;pos\u0026quot;, rownames_to_stub = T) %\u0026gt;% tab_options(\rrow_group.background.color = \u0026quot;#FFEFDB80\u0026quot;,#EFFBFC\rheading.background.color = \u0026quot;#ebebeb\u0026quot;,\rcolumn_labels.background.color = \u0026quot;#ebebeb\u0026quot;,\rstub.background.color = \u0026quot;#ebebeb\u0026quot;,\rtable.font.color = \u0026quot;#323232\u0026quot;,\rtable_body.hlines.color = \u0026quot;#989898\u0026quot;,\rtable_body.border.top.color = \u0026quot;#989898\u0026quot;,\rheading.border.bottom.color = \u0026quot;#989898\u0026quot;,\rrow_group.border.top.color = \u0026quot;#989898\u0026quot;,\rrow_group.border.bottom.style = \u0026quot;none\u0026quot;,\rstub.border.style = \u0026quot;dashed\u0026quot;,\rstub.border.color = \u0026quot;#989898\u0026quot;,\rstub.border.width = \u0026quot;1px\u0026quot;,\rtable.width = \u0026quot;60%\u0026quot;\r) %\u0026gt;% opt_all_caps() %\u0026gt;% cols_align(align = \u0026quot;center\u0026quot;, columns = c(1,3:7))\rMINIMUM_DIFFERENCE \u0026lt;- 8\rThese are some options that we want to have for both our tables so we create a function for it. We also set the minimum difference to 8, so the table isn’t to crowded.\nOver Table with Player we don’t want to draft looks like this:\noverhyped %\u0026gt;% filter(diff \u0026lt;= -MINIMUM_DIFFERENCE) %\u0026gt;% table_init_with_options() %\u0026gt;% tab_header(\rtitle = md(\u0026quot;Overhyped Players on *Sleeper.App*\u0026quot;),\rsubtitle = \u0026quot;(Players that tend to go before their general ADP)\u0026quot;\r) %\u0026gt;% data_color(\rcolumns = vars(diff),\rcolors = scales::col_numeric(\rpalette = paletteer::paletteer_d(\rpalette = \u0026quot;ggsci::red_material\u0026quot;\r) %\u0026gt;% as.character(),\rdomain = NULL,\rreverse = T\r),\ralpha = 0.8\r)\rhtml {\rfont-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif;\r}\r#sgruksazbm .gt_table {\rdisplay: table;\rborder-collapse: collapse;\rmargin-left: auto;\rmargin-right: auto;\rcolor: #323232;\rfont-size: 16px;\rfont-weight: normal;\rfont-style: normal;\rbackground-color: #FFFFFF;\rwidth: 60%;\rborder-top-style: solid;\rborder-top-width: 2px;\rborder-top-color: #A8A8A8;\rborder-right-style: none;\rborder-right-width: 2px;\rborder-right-color: #D3D3D3;\rborder-bottom-style: solid;\rborder-bottom-width: 2px;\rborder-bottom-color: #A8A8A8;\rborder-left-style: none;\rborder-left-width: 2px;\rborder-left-color: #D3D3D3;\r}\r#sgruksazbm .gt_heading {\rbackground-color: #ebebeb;\rtext-align: center;\rborder-bottom-color: #FFFFFF;\rborder-left-style: none;\rborder-left-width: 1px;\rborder-left-color: #D3D3D3;\rborder-right-style: none;\rborder-right-width: 1px;\rborder-right-color: #D3D3D3;\r}\r#sgruksazbm .gt_title {\rcolor: #323232;\rfont-size: 125%;\rfont-weight: initial;\rpadding-top: 4px;\rpadding-bottom: 4px;\rborder-bottom-color: #FFFFFF;\rborder-bottom-width: 0;\r}\r#sgruksazbm .gt_subtitle {\rcolor: #323232;\rfont-size: 85%;\rfont-weight: initial;\rpadding-top: 0;\rpadding-bottom: 4px;\rborder-top-color: #FFFFFF;\rborder-top-width: 0;\r}\r#sgruksazbm .gt_bottom_border {\rborder-bottom-style: solid;\rborder-bottom-width: 2px;\rborder-bottom-color: #989898;\r}\r#sgruksazbm .gt_col_headings {\rborder-top-style: solid;\rborder-top-width: 2px;\rborder-top-color: #D3D3D3;\rborder-bottom-style: solid;\rborder-bottom-width: 2px;\rborder-bottom-color: #D3D3D3;\rborder-left-style: none;\rborder-left-width: 1px;\rborder-left-color: #D3D3D3;\rborder-right-style: none;\rborder-right-width: 1px;\rborder-right-color: #D3D3D3;\r}\r#sgruksazbm .gt_col_heading {\rcolor: #323232;\rbackground-color: #ebebeb;\rfont-size: 80%;\rfont-weight: bolder;\rtext-transform: uppercase;\rborder-left-style: none;\rborder-left-width: 1px;\rborder-left-color: #D3D3D3;\rborder-right-style: none;\rborder-right-width: 1px;\rborder-right-color: #D3D3D3;\rvertical-align: bottom;\rpadding-top: 5px;\rpadding-bottom: 6px;\rpadding-left: 5px;\rpadding-right: 5px;\roverflow-x: hidden;\r}\r#sgruksazbm .gt_column_spanner_outer {\rcolor: #323232;\rbackground-color: #ebebeb;\rfont-size: 80%;\rfont-weight: bolder;\rtext-transform: uppercase;\rpadding-top: 0;\rpadding-bottom: 0;\rpadding-left: 4px;\rpadding-right: 4px;\r}\r#sgruksazbm .gt_column_spanner_outer:first-child {\rpadding-left: 0;\r}\r#sgruksazbm .gt_column_spanner_outer:last-child {\rpadding-right: 0;\r}\r#sgruksazbm .gt_column_spanner {\rborder-bottom-style: solid;\rborder-bottom-width: 2px;\rborder-bottom-color: #D3D3D3;\rvertical-align: bottom;\rpadding-top: 5px;\rpadding-bottom: 6px;\roverflow-x: hidden;\rdisplay: inline-block;\rwidth: 100%;\r}\r#sgruksazbm .gt_group_heading {\rpadding: 8px;\rcolor: #323232;\rbackground-color: #FFEFDB80;\rfont-size: 80%;\rfont-weight: bolder;\rtext-transform: uppercase;\rborder-top-style: solid;\rborder-top-width: 2px;\rborder-top-color: #989898;\rborder-bottom-style: none;\rborder-bottom-width: 2px;\rborder-bottom-color: #D3D3D3;\rborder-left-style: none;\rborder-left-width: 1px;\rborder-left-color: #D3D3D3;\rborder-right-style: none;\rborder-right-width: 1px;\rborder-right-color: #D3D3D3;\rvertical-align: middle;\r}\r#sgruksazbm .gt_empty_group_heading {\rpadding: 0.5px;\rcolor: #323232;\rbackground-color: #FFEFDB80;\rfont-size: 80%;\rfont-weight: bolder;\rborder-top-style: solid;\rborder-top-width: 2px;\rborder-top-color: #989898;\rborder-bottom-style: none;\rborder-bottom-width: 2px;\rborder-bottom-color: #D3D3D3;\rvertical-align: middle;\r}\r#sgruksazbm .gt_from_md  :first-child {\rmargin-top: 0;\r}\r#sgruksazbm .gt_from_md  :last-child {\rmargin-bottom: 0;\r}\r#sgruksazbm .gt_row {\rpadding-top: 8px;\rpadding-bottom: 8px;\rpadding-left: 5px;\rpadding-right: 5px;\rmargin: 10px;\rborder-top-style: solid;\rborder-top-width: 1px;\rborder-top-color: #989898;\rborder-left-style: none;\rborder-left-width: 1px;\rborder-left-color: #D3D3D3;\rborder-right-style: none;\rborder-right-width: 1px;\rborder-right-color: #D3D3D3;\rvertical-align: middle;\roverflow-x: hidden;\r}\r#sgruksazbm .gt_stub {\rcolor: #323232;\rbackground-color: #ebebeb;\rfont-size: 80%;\rfont-weight: bolder;\rtext-transform: uppercase;\rborder-right-style: dashed;\rborder-right-width: 1px;\rborder-right-color: #989898;\rpadding-left: 12px;\r}\r#sgruksazbm .gt_summary_row {\rcolor: #323232;\rbackground-color: #FFFFFF;\rtext-transform: inherit;\rpadding-top: 8px;\rpadding-bottom: 8px;\rpadding-left: 5px;\rpadding-right: 5px;\r}\r#sgruksazbm .gt_first_summary_row {\rpadding-top: 8px;\rpadding-bottom: 8px;\rpadding-left: 5px;\rpadding-right: 5px;\rborder-top-style: solid;\rborder-top-width: 2px;\rborder-top-color: #D3D3D3;\r}\r#sgruksazbm .gt_grand_summary_row {\rcolor: #323232;\rbackground-color: #FFFFFF;\rtext-transform: inherit;\rpadding-top: 8px;\rpadding-bottom: 8px;\rpadding-left: 5px;\rpadding-right: 5px;\r}\r#sgruksazbm .gt_first_grand_summary_row {\rpadding-top: 8px;\rpadding-bottom: 8px;\rpadding-left: 5px;\rpadding-right: 5px;\rborder-top-style: double;\rborder-top-width: 6px;\rborder-top-color: #D3D3D3;\r}\r#sgruksazbm .gt_striped {\rbackground-color: rgba(128, 128, 128, 0.05);\r}\r#sgruksazbm .gt_table_body {\rborder-top-style: solid;\rborder-top-width: 2px;\rborder-top-color: #989898;\rborder-bottom-style: solid;\rborder-bottom-width: 2px;\rborder-bottom-color: #D3D3D3;\r}\r#sgruksazbm .gt_footnotes {\rcolor: #323232;\rbackground-color: #FFFFFF;\rborder-bottom-style: none;\rborder-bottom-width: 2px;\rborder-bottom-color: #D3D3D3;\rborder-left-style: none;\rborder-left-width: 2px;\rborder-left-color: #D3D3D3;\rborder-right-style: none;\rborder-right-width: 2px;\rborder-right-color: #D3D3D3;\r}\r#sgruksazbm .gt_footnote {\rmargin: 0px;\rfont-size: 90%;\rpadding: 4px;\r}\r#sgruksazbm .gt_sourcenotes {\rcolor: #323232;\rbackground-color: #FFFFFF;\rborder-bottom-style: none;\rborder-bottom-width: 2px;\rborder-bottom-color: #D3D3D3;\rborder-left-style: none;\rborder-left-width: 2px;\rborder-left-color: #D3D3D3;\rborder-right-style: none;\rborder-right-width: 2px;\rborder-right-color: #D3D3D3;\r}\r#sgruksazbm .gt_sourcenote {\rfont-size: 90%;\rpadding: 4px;\r}\r#sgruksazbm .gt_left {\rtext-align: left;\r}\r#sgruksazbm .gt_center {\rtext-align: center;\r}\r#sgruksazbm .gt_right {\rtext-align: right;\rfont-variant-numeric: tabular-nums;\r}\r#sgruksazbm .gt_font_normal {\rfont-weight: normal;\r}\r#sgruksazbm .gt_font_bold {\rfont-weight: bold;\r}\r#sgruksazbm .gt_font_italic {\rfont-style: italic;\r}\r#sgruksazbm .gt_super {\rfont-size: 65%;\r}\r#sgruksazbm .gt_footnote_marks {\rfont-style: italic;\rfont-size: 65%;\r}\r\r\rOverhyped Players on Sleeper.App\r\r\r(Players that tend to go before their general ADP)\r\r\r\r\rname\rteam\rfp\rsleeper\rdiff\r\r\rWR\r\r\r1\rDeebo Samuel\rSF\r123\r75\r-48\r\r\r2\rMecole Hardman\rKC\r147\r100\r-47\r\r\r4\rEmmanuel Sanders\rNO\r127\r99\r-28\r\r\r12\rBrandin Cooks\rHOU\r87\r73\r-14\r\r\r17\rT.Y. Hilton\rIND\r63\r52\r-11\r\r\r20\rD.K. Metcalf\rSEA\r53\r44\r-9\r\r\r21\rMarquise Brown\rBAL\r73\r64\r-9\r\rTE\r\r\r3\rRob Gronkowski\rTB\r107\r72\r-35\r\rRB\r\r\r5\rMarlon Mack\rIND\r91\r69\r-22\r\r\r6\rAlexander Mattison\rMIN\r113\r96\r-17\r\r\r8\rSony Michel\rNE\r109\r93\r-16\r\r\r9\rDavid Montgomery\rCHI\r52\r37\r-15\r\r\r10\rDevin Singletary\rBUF\r57\r42\r-15\r\r\r11\rJames Conner\rPIT\r39\r25\r-14\r\r\r13\rLe'Veon Bell\rNYJ\r42\r29\r-13\r\r\r14\rJ.K. Dobbins\rBAL\r89\r76\r-13\r\r\r16\rDavid Johnson\rHOU\r44\r33\r-11\r\r\r18\rMelvin Gordon\rDEN\r41\r31\r-10\r\r\r19\rMark Ingram II\rBAL\r48\r39\r-9\r\r\r22\rJonathan Taylor\rIND\r54\r46\r-8\r\rQB\r\r\r7\rAaron Rodgers\rGB\r98\r82\r-16\r\r\r15\rPatrick Mahomes\rKC\r25\r14\r-11\r\r\r\rHere’s our table for potential steals:\nsteals %\u0026gt;% filter(diff \u0026gt;= MINIMUM_DIFFERENCE) %\u0026gt;%\rtable_init_with_options() %\u0026gt;% tab_header(\rtitle = md(\u0026quot;Potential Steals on *Sleeper.App*\u0026quot;),\rsubtitle = \u0026quot;(Players that tend to go after their general ADP)\u0026quot;\r) %\u0026gt;% data_color(\rcolumns = vars(diff),\rcolors = scales::col_numeric(\rpalette = paletteer::paletteer_d(\rpalette = \u0026quot;ggsci::green_material\u0026quot;\r) %\u0026gt;% as.character(),\rdomain = NULL\r),\ralpha = 0.8\r)\rhtml {\rfont-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif;\r}\r#hhgzdoptpa .gt_table {\rdisplay: table;\rborder-collapse: collapse;\rmargin-left: auto;\rmargin-right: auto;\rcolor: #323232;\rfont-size: 16px;\rfont-weight: normal;\rfont-style: normal;\rbackground-color: #FFFFFF;\rwidth: 60%;\rborder-top-style: solid;\rborder-top-width: 2px;\rborder-top-color: #A8A8A8;\rborder-right-style: none;\rborder-right-width: 2px;\rborder-right-color: #D3D3D3;\rborder-bottom-style: solid;\rborder-bottom-width: 2px;\rborder-bottom-color: #A8A8A8;\rborder-left-style: none;\rborder-left-width: 2px;\rborder-left-color: #D3D3D3;\r}\r#hhgzdoptpa .gt_heading {\rbackground-color: #ebebeb;\rtext-align: center;\rborder-bottom-color: #FFFFFF;\rborder-left-style: none;\rborder-left-width: 1px;\rborder-left-color: #D3D3D3;\rborder-right-style: none;\rborder-right-width: 1px;\rborder-right-color: #D3D3D3;\r}\r#hhgzdoptpa .gt_title {\rcolor: #323232;\rfont-size: 125%;\rfont-weight: initial;\rpadding-top: 4px;\rpadding-bottom: 4px;\rborder-bottom-color: #FFFFFF;\rborder-bottom-width: 0;\r}\r#hhgzdoptpa .gt_subtitle {\rcolor: #323232;\rfont-size: 85%;\rfont-weight: initial;\rpadding-top: 0;\rpadding-bottom: 4px;\rborder-top-color: #FFFFFF;\rborder-top-width: 0;\r}\r#hhgzdoptpa .gt_bottom_border {\rborder-bottom-style: solid;\rborder-bottom-width: 2px;\rborder-bottom-color: #989898;\r}\r#hhgzdoptpa .gt_col_headings {\rborder-top-style: solid;\rborder-top-width: 2px;\rborder-top-color: #D3D3D3;\rborder-bottom-style: solid;\rborder-bottom-width: 2px;\rborder-bottom-color: #D3D3D3;\rborder-left-style: none;\rborder-left-width: 1px;\rborder-left-color: #D3D3D3;\rborder-right-style: none;\rborder-right-width: 1px;\rborder-right-color: #D3D3D3;\r}\r#hhgzdoptpa .gt_col_heading {\rcolor: #323232;\rbackground-color: #ebebeb;\rfont-size: 80%;\rfont-weight: bolder;\rtext-transform: uppercase;\rborder-left-style: none;\rborder-left-width: 1px;\rborder-left-color: #D3D3D3;\rborder-right-style: none;\rborder-right-width: 1px;\rborder-right-color: #D3D3D3;\rvertical-align: bottom;\rpadding-top: 5px;\rpadding-bottom: 6px;\rpadding-left: 5px;\rpadding-right: 5px;\roverflow-x: hidden;\r}\r#hhgzdoptpa .gt_column_spanner_outer {\rcolor: #323232;\rbackground-color: #ebebeb;\rfont-size: 80%;\rfont-weight: bolder;\rtext-transform: uppercase;\rpadding-top: 0;\rpadding-bottom: 0;\rpadding-left: 4px;\rpadding-right: 4px;\r}\r#hhgzdoptpa .gt_column_spanner_outer:first-child {\rpadding-left: 0;\r}\r#hhgzdoptpa .gt_column_spanner_outer:last-child {\rpadding-right: 0;\r}\r#hhgzdoptpa .gt_column_spanner {\rborder-bottom-style: solid;\rborder-bottom-width: 2px;\rborder-bottom-color: #D3D3D3;\rvertical-align: bottom;\rpadding-top: 5px;\rpadding-bottom: 6px;\roverflow-x: hidden;\rdisplay: inline-block;\rwidth: 100%;\r}\r#hhgzdoptpa .gt_group_heading {\rpadding: 8px;\rcolor: #323232;\rbackground-color: #FFEFDB80;\rfont-size: 80%;\rfont-weight: bolder;\rtext-transform: uppercase;\rborder-top-style: solid;\rborder-top-width: 2px;\rborder-top-color: #989898;\rborder-bottom-style: none;\rborder-bottom-width: 2px;\rborder-bottom-color: #D3D3D3;\rborder-left-style: none;\rborder-left-width: 1px;\rborder-left-color: #D3D3D3;\rborder-right-style: none;\rborder-right-width: 1px;\rborder-right-color: #D3D3D3;\rvertical-align: middle;\r}\r#hhgzdoptpa .gt_empty_group_heading {\rpadding: 0.5px;\rcolor: #323232;\rbackground-color: #FFEFDB80;\rfont-size: 80%;\rfont-weight: bolder;\rborder-top-style: solid;\rborder-top-width: 2px;\rborder-top-color: #989898;\rborder-bottom-style: none;\rborder-bottom-width: 2px;\rborder-bottom-color: #D3D3D3;\rvertical-align: middle;\r}\r#hhgzdoptpa .gt_from_md  :first-child {\rmargin-top: 0;\r}\r#hhgzdoptpa .gt_from_md  :last-child {\rmargin-bottom: 0;\r}\r#hhgzdoptpa .gt_row {\rpadding-top: 8px;\rpadding-bottom: 8px;\rpadding-left: 5px;\rpadding-right: 5px;\rmargin: 10px;\rborder-top-style: solid;\rborder-top-width: 1px;\rborder-top-color: #989898;\rborder-left-style: none;\rborder-left-width: 1px;\rborder-left-color: #D3D3D3;\rborder-right-style: none;\rborder-right-width: 1px;\rborder-right-color: #D3D3D3;\rvertical-align: middle;\roverflow-x: hidden;\r}\r#hhgzdoptpa .gt_stub {\rcolor: #323232;\rbackground-color: #ebebeb;\rfont-size: 80%;\rfont-weight: bolder;\rtext-transform: uppercase;\rborder-right-style: dashed;\rborder-right-width: 1px;\rborder-right-color: #989898;\rpadding-left: 12px;\r}\r#hhgzdoptpa .gt_summary_row {\rcolor: #323232;\rbackground-color: #FFFFFF;\rtext-transform: inherit;\rpadding-top: 8px;\rpadding-bottom: 8px;\rpadding-left: 5px;\rpadding-right: 5px;\r}\r#hhgzdoptpa .gt_first_summary_row {\rpadding-top: 8px;\rpadding-bottom: 8px;\rpadding-left: 5px;\rpadding-right: 5px;\rborder-top-style: solid;\rborder-top-width: 2px;\rborder-top-color: #D3D3D3;\r}\r#hhgzdoptpa .gt_grand_summary_row {\rcolor: #323232;\rbackground-color: #FFFFFF;\rtext-transform: inherit;\rpadding-top: 8px;\rpadding-bottom: 8px;\rpadding-left: 5px;\rpadding-right: 5px;\r}\r#hhgzdoptpa .gt_first_grand_summary_row {\rpadding-top: 8px;\rpadding-bottom: 8px;\rpadding-left: 5px;\rpadding-right: 5px;\rborder-top-style: double;\rborder-top-width: 6px;\rborder-top-color: #D3D3D3;\r}\r#hhgzdoptpa .gt_striped {\rbackground-color: rgba(128, 128, 128, 0.05);\r}\r#hhgzdoptpa .gt_table_body {\rborder-top-style: solid;\rborder-top-width: 2px;\rborder-top-color: #989898;\rborder-bottom-style: solid;\rborder-bottom-width: 2px;\rborder-bottom-color: #D3D3D3;\r}\r#hhgzdoptpa .gt_footnotes {\rcolor: #323232;\rbackground-color: #FFFFFF;\rborder-bottom-style: none;\rborder-bottom-width: 2px;\rborder-bottom-color: #D3D3D3;\rborder-left-style: none;\rborder-left-width: 2px;\rborder-left-color: #D3D3D3;\rborder-right-style: none;\rborder-right-width: 2px;\rborder-right-color: #D3D3D3;\r}\r#hhgzdoptpa .gt_footnote {\rmargin: 0px;\rfont-size: 90%;\rpadding: 4px;\r}\r#hhgzdoptpa .gt_sourcenotes {\rcolor: #323232;\rbackground-color: #FFFFFF;\rborder-bottom-style: none;\rborder-bottom-width: 2px;\rborder-bottom-color: #D3D3D3;\rborder-left-style: none;\rborder-left-width: 2px;\rborder-left-color: #D3D3D3;\rborder-right-style: none;\rborder-right-width: 2px;\rborder-right-color: #D3D3D3;\r}\r#hhgzdoptpa .gt_sourcenote {\rfont-size: 90%;\rpadding: 4px;\r}\r#hhgzdoptpa .gt_left {\rtext-align: left;\r}\r#hhgzdoptpa .gt_center {\rtext-align: center;\r}\r#hhgzdoptpa .gt_right {\rtext-align: right;\rfont-variant-numeric: tabular-nums;\r}\r#hhgzdoptpa .gt_font_normal {\rfont-weight: normal;\r}\r#hhgzdoptpa .gt_font_bold {\rfont-weight: bold;\r}\r#hhgzdoptpa .gt_font_italic {\rfont-style: italic;\r}\r#hhgzdoptpa .gt_super {\rfont-size: 65%;\r}\r#hhgzdoptpa .gt_footnote_marks {\rfont-style: italic;\rfont-size: 65%;\r}\r\r\rPotential Steals on Sleeper.App\r\r\r(Players that tend to go after their general ADP)\r\r\r\r\rname\rteam\rfp\rsleeper\rdiff\r\r\rRB\r\r\r1\rTarik Cohen\rCHI\r88\r120\r32\r\r\r18\rJames White\rNE\r80\r90\r10\r\rTE\r\r\r2\rTyler Higbee\rLAR\r77\r106\r29\r\r\r3\rAustin Hooper\rCLE\r99\r124\r25\r\r\r19\rHayden Hurst\rATL\r97\r107\r10\r\r\r20\rHunter Henry\rLAC\r78\r87\r9\r\rQB\r\r\r4\rJosh Allen\rBUF\r70\r89\r19\r\r\r5\rMatthew Stafford\rDET\r90\r109\r19\r\r\r12\rCarson Wentz\rPHI\r83\r98\r15\r\r\r22\rMatt Ryan\rATL\r75\r83\r8\r\rWR\r\r\r6\rD.J. Moore\rCAR\r30\r47\r17\r\r\r7\rOdell Beckham Jr.\rCLE\r31\r48\r17\r\r\r8\rCourtland Sutton\rDEN\r50\r67\r17\r\r\r9\rAllen Robinson\rCHI\r24\r40\r16\r\r\r10\rDeVante Parker\rMIA\r55\r71\r16\r\r\r11\rJuJu Smith-Schuster\rPIT\r28\r43\r15\r\r\r13\rJarvis Landry\rCLE\r67\r81\r14\r\r\r14\rRobert Woods\rLAR\r36\r49\r13\r\r\r15\rTyler Boyd\rCIN\r72\r85\r13\r\r\r16\rMarvin Jones\rDET\r81\r94\r13\r\r\r17\rTerry McLaurin\rWAS\r49\r59\r10\r\r\r21\rD.J. Chark\rJAX\r47\r55\r8\r\r\r\r\rConclusion\rThese tables might help, when drafting on Sleeper this year. You should, however, never base your whole draft around this. If you like a player and find him on the Steals-Table, great! You might even get him a round later than usual. If you like a player, but he is on the Overhyped-Table, you have to decide, if you really want him, because you might have to pay a hefty price.\nStandalone Overhyped Table can be found here\rStandalone Steal table can be found here\n\r","date":1597708800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1597775577,"objectID":"06e3a7b0af860551a93f0779cb1c1ee9","permalink":"/post/draft-bargains-2020-sleeper/","publishdate":"2020-08-18T00:00:00Z","relpermalink":"/post/draft-bargains-2020-sleeper/","section":"post","summary":"Every year I try to compare the rankings on the fantasy football site I play on with consensus expert rankings in order to find exploits.\nIf a player is goes way earlier than he is evalued by experts, I will probably not draft him at all as it is not a good value.","tags":["fantasy-football","nfl","R"],"title":"Draft Bargains 2020 (Sleeper)","type":"post"},{"authors":[],"categories":["Python","Webscraping"],"content":"\r\rThis Post will show you how to scrape the in-draft rankings from sleeper.app using Python and Selenium.\nPrerequisites\r\rsleeper.app-Account\rAt least one open mock draft in this account\rDownloaded chromedriver.exe from here\rInstalled Packages Selenium and Pandas\r\r\rApproach\rWe will need the following imports:\nfrom selenium import webdriver\rfrom selenium.webdriver.common.by import By\rfrom selenium.webdriver.support.ui import WebDriverWait\rfrom selenium.webdriver.support import expected_conditions as EC\rfrom selenium.webdriver.common.action_chains import ActionChains\rfrom selenium.webdriver.chrome.options import Options\rimport pandas as pd\rimport time\rfrom datetime import date\rNext we will need to setup the script. If you want to run it headless you can by uncommenting these lines, I find it, however, interesting to look at the window move.\nUSERNAME = \u0026quot;INSERT USERNAME HERE\u0026quot; # Sleeper.app Username\rPASSWORD = \u0026quot;INSERT PASSWORD HERE\u0026quot; # Sleeper.app Password\rchrome_options = Options()\r# If you uncomment these line the browser will run headless meaning\r# it wont open a browser window for you to look at\r# chrome_options.add_argument(\u0026quot;--headless\u0026quot;)\r# chrome_options.add_argument(\u0026quot;--disable-gpu\u0026quot;)\r# My chromedriver.exe is in the project path. Update accordingly\rdriver = webdriver.Chrome(executable_path = \u0026#39;./driver/chromedriver.exe\u0026#39;, options=chrome_options)\rdriver.get(\u0026quot;https://sleeper.app/login\u0026quot;) # Get to the Login Page\rAfter this code has ran, the controlled Chromebrowser will show a login page. We need to log into our account.\n# Find Username field using XPath - Fill in Username\rdriver.find_element_by_xpath(\u0026quot;//input\u0026quot;).send_keys(USERNAME)\r# Find Login Button - Clock\rloginButton = driver.find_element_by_xpath(\u0026#39;//*[contains(concat( \u0026quot; \u0026quot;, @class, \u0026quot; \u0026quot; ), concat( \u0026quot; \u0026quot;, \u0026quot;login-button\u0026quot;, \u0026quot; \u0026quot; ))]\u0026#39;)\rloginButton.click()\rtime.sleep(2)\r# After First Click Password Field Will Show Up - Enter Password and click again\rdriver.find_elements_by_xpath(\u0026#39;//input\u0026#39;)[1].send_keys(PASSWORD)\rloginButton.click()\rWe are now logged in. The next step would be to navigate to our previously created mock draft and have a look at its rankings.\n# LOGGED IN NOW - Waiting just to make sure\rtime.sleep(10)\r# Click Mock Draft Page - Click on first Mock Draft Found\r# HINT: You NEED to create this mock draft by hand before\rdriver.find_element_by_xpath(\u0026#39;//*[contains(concat( \u0026quot; \u0026quot;, @class, \u0026quot; \u0026quot; ), concat( \u0026quot; \u0026quot;, \u0026quot;nav-draftboard-item\u0026quot;, \u0026quot; \u0026quot; ))]//*[contains(concat( \u0026quot; \u0026quot;, @class, \u0026quot; \u0026quot; ), concat( \u0026quot; \u0026quot;, \u0026quot;title\u0026quot;, \u0026quot; \u0026quot; ))]\u0026#39;).click()\rtime.sleep(5)\rdriver.find_element_by_class_name(\u0026quot;draft-list-item\u0026quot;).click()\rtime.sleep(2)\r# Switch To New Mock Draft Tab\r# Although it looks like it, the active window is not yet the mock draft\rdriver.switch_to.window(driver.window_handles[1])\rWe are now in a draft lobby and can see the rankings. Let’s scrape them:\n(The Python comments should explain pretty well what the code is doing)\n# Init Data Loading Web Driver\rwait = WebDriverWait(driver,15)\rscraped_elements = set() # Contains ID\u0026#39;s of already scraped names\rexecute_loop = True\rrows_list = [] # Contains Dicts - Row of our DataFrame\rrank = 1 # Counter for Rank\rwhile execute_loop:\r# Get Visible Entries\rnames = wait.until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, \u0026#39;.name-wrapper\u0026#39;)))\rfor name in names:\rif name.id in scraped_elements: # Already Scraped\rcontinue\r# New Player\rscraped_elements.add(name.id)\rdata_extract = name.text.split(\u0026#39;\\n\u0026#39;)\rif len(data_extract) \u0026lt; 3: # Not Fully Loaded -\u0026gt; Remove Again\rscraped_elements.remove(name.id)\rbreak\rrows_list.append({\r\u0026quot;rank\u0026quot;: rank,\r\u0026quot;name\u0026quot;: data_extract[0],\r\u0026quot;pos\u0026quot;: data_extract[1],\r\u0026quot;team\u0026quot;: data_extract[2]\r})\rprint(f\u0026quot;{rank} - {data_extract[0]}\u0026quot;)\rrank += 1\rif len(rows_list) \u0026gt;= 300: # Only Scrape First 300 Players\rprint(\u0026quot;ABORTING..\u0026quot;)\rexecute_loop = False\r# Scroll Down\r# .odd is every other row\r# (You could probably scroll down more/faster)\rActionChains(driver).move_to_element(driver.find_elements_by_css_selector(\u0026quot;.odd\u0026quot;)[5]).perform()\rWe have successfully scraped the top 300 player list on Sleeper! We need to save the data in a last step:\n# Write CSV\rdf = pd.DataFrame(data=rows_list)\rprint(df)\rdf.to_csv(f\u0026quot;data/sleeper-mock-ranks-{date.today()}.csv\u0026quot;, index=False)\rdriver.quit() # Quit\rAfter that we have a .csv with our scraped players.\nIf you want to download the script, click here\nIf you don’t want to run the script yourself click here\n\r","date":1597708800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1597773802,"objectID":"154faa22db7b5964726a00e1d83efb6c","permalink":"/post/scraping-rankings-from-sleeper-with-selenium/","publishdate":"2020-08-18T00:00:00Z","relpermalink":"/post/scraping-rankings-from-sleeper-with-selenium/","section":"post","summary":"This Post will show you how to scrape the in-draft rankings from sleeper.app using Python and Selenium.\nPrerequisites\r\rsleeper.app-Account\rAt least one open mock draft in this account\rDownloaded chromedriver.","tags":["python webscraping selenium"],"title":"Scraping Rankings from Sleeper with Selenium","type":"post"},{"authors":[],"categories":["R","rstats"],"content":"\r\rWith the Fantasy Football season only a few weeks away, I decided to look back at the 2019 season and the greatest weekly performances.\nIn this post I will try to visualize the best weekly performances as well as the performance of the best players over the whole season.\nSetup\rFirst, we need data. Since I didn’t have fantasy specific data I thought the easiest way to do this is to calculate the fantasy points from the Play-By-Play Data.\nYou can find this and many more great datasets here.\npbp \u0026lt;- readRDS(url(\u0026quot;https://raw.githubusercontent.com/guga31bb/nflfastR-data/master/data/play_by_play_2019.rds\u0026quot;))\rpbp \u0026lt;- pbp %\u0026gt;%\rfilter(\rseason_type == \u0026quot;REG\u0026quot;,\rbetween(week, 1, 16)\r)\rpbp\r## # A tibble: 43,240 x 333\r## play_id game_id old_game_id home_team away_team season_type week posteam\r## \u0026lt;dbl\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;int\u0026gt; \u0026lt;chr\u0026gt; ## 1 1 2019_0~ 2019090804 MIN ATL REG 1 \u0026lt;NA\u0026gt; ## 2 36 2019_0~ 2019090804 MIN ATL REG 1 ATL ## 3 51 2019_0~ 2019090804 MIN ATL REG 1 ATL ## 4 79 2019_0~ 2019090804 MIN ATL REG 1 ATL ## 5 100 2019_0~ 2019090804 MIN ATL REG 1 ATL ## 6 121 2019_0~ 2019090804 MIN ATL REG 1 ATL ## 7 148 2019_0~ 2019090804 MIN ATL REG 1 MIN ## 8 185 2019_0~ 2019090804 MIN ATL REG 1 MIN ## 9 214 2019_0~ 2019090804 MIN ATL REG 1 MIN ## 10 239 2019_0~ 2019090804 MIN ATL REG 1 MIN ## # ... with 43,230 more rows, and 325 more variables: posteam_type \u0026lt;chr\u0026gt;,\r## # defteam \u0026lt;chr\u0026gt;, side_of_field \u0026lt;chr\u0026gt;, yardline_100 \u0026lt;dbl\u0026gt;, game_date \u0026lt;chr\u0026gt;,\r## # quarter_seconds_remaining \u0026lt;dbl\u0026gt;, half_seconds_remaining \u0026lt;dbl\u0026gt;,\r## # game_seconds_remaining \u0026lt;dbl\u0026gt;, game_half \u0026lt;chr\u0026gt;, quarter_end \u0026lt;dbl\u0026gt;,\r## # drive \u0026lt;dbl\u0026gt;, sp \u0026lt;dbl\u0026gt;, qtr \u0026lt;dbl\u0026gt;, down \u0026lt;dbl\u0026gt;, goal_to_go \u0026lt;dbl\u0026gt;, time \u0026lt;chr\u0026gt;,\r## # yrdln \u0026lt;chr\u0026gt;, ydstogo \u0026lt;dbl\u0026gt;, ydsnet \u0026lt;dbl\u0026gt;, desc \u0026lt;chr\u0026gt;, play_type \u0026lt;chr\u0026gt;,\r## # yards_gained \u0026lt;dbl\u0026gt;, shotgun \u0026lt;dbl\u0026gt;, no_huddle \u0026lt;dbl\u0026gt;, qb_dropback \u0026lt;dbl\u0026gt;,\r## # qb_kneel \u0026lt;dbl\u0026gt;, qb_spike \u0026lt;dbl\u0026gt;, qb_scramble \u0026lt;dbl\u0026gt;, pass_length \u0026lt;chr\u0026gt;,\r## # pass_location \u0026lt;chr\u0026gt;, air_yards \u0026lt;dbl\u0026gt;, yards_after_catch \u0026lt;dbl\u0026gt;,\r## # run_location \u0026lt;chr\u0026gt;, run_gap \u0026lt;chr\u0026gt;, field_goal_result \u0026lt;chr\u0026gt;,\r## # kick_distance \u0026lt;dbl\u0026gt;, extra_point_result \u0026lt;chr\u0026gt;, two_point_conv_result \u0026lt;chr\u0026gt;,\r## # home_timeouts_remaining \u0026lt;dbl\u0026gt;, away_timeouts_remaining \u0026lt;dbl\u0026gt;,\r## # timeout \u0026lt;dbl\u0026gt;, timeout_team \u0026lt;chr\u0026gt;, td_team \u0026lt;chr\u0026gt;,\r## # posteam_timeouts_remaining \u0026lt;dbl\u0026gt;, defteam_timeouts_remaining \u0026lt;dbl\u0026gt;,\r## # total_home_score \u0026lt;dbl\u0026gt;, total_away_score \u0026lt;dbl\u0026gt;, posteam_score \u0026lt;dbl\u0026gt;,\r## # defteam_score \u0026lt;dbl\u0026gt;, score_differential \u0026lt;dbl\u0026gt;, posteam_score_post \u0026lt;dbl\u0026gt;,\r## # defteam_score_post \u0026lt;dbl\u0026gt;, score_differential_post \u0026lt;dbl\u0026gt;,\r## # no_score_prob \u0026lt;dbl\u0026gt;, opp_fg_prob \u0026lt;dbl\u0026gt;, opp_safety_prob \u0026lt;dbl\u0026gt;,\r## # opp_td_prob \u0026lt;dbl\u0026gt;, fg_prob \u0026lt;dbl\u0026gt;, safety_prob \u0026lt;dbl\u0026gt;, td_prob \u0026lt;dbl\u0026gt;,\r## # extra_point_prob \u0026lt;dbl\u0026gt;, two_point_conversion_prob \u0026lt;dbl\u0026gt;, ep \u0026lt;dbl\u0026gt;,\r## # epa \u0026lt;dbl\u0026gt;, total_home_epa \u0026lt;dbl\u0026gt;, total_away_epa \u0026lt;dbl\u0026gt;,\r## # total_home_rush_epa \u0026lt;dbl\u0026gt;, total_away_rush_epa \u0026lt;dbl\u0026gt;,\r## # total_home_pass_epa \u0026lt;dbl\u0026gt;, total_away_pass_epa \u0026lt;dbl\u0026gt;, air_epa \u0026lt;dbl\u0026gt;,\r## # yac_epa \u0026lt;dbl\u0026gt;, comp_air_epa \u0026lt;dbl\u0026gt;, comp_yac_epa \u0026lt;dbl\u0026gt;,\r## # total_home_comp_air_epa \u0026lt;dbl\u0026gt;, total_away_comp_air_epa \u0026lt;dbl\u0026gt;,\r## # total_home_comp_yac_epa \u0026lt;dbl\u0026gt;, total_away_comp_yac_epa \u0026lt;dbl\u0026gt;,\r## # total_home_raw_air_epa \u0026lt;dbl\u0026gt;, total_away_raw_air_epa \u0026lt;dbl\u0026gt;,\r## # total_home_raw_yac_epa \u0026lt;dbl\u0026gt;, total_away_raw_yac_epa \u0026lt;dbl\u0026gt;, wp \u0026lt;dbl\u0026gt;,\r## # def_wp \u0026lt;dbl\u0026gt;, home_wp \u0026lt;dbl\u0026gt;, away_wp \u0026lt;dbl\u0026gt;, wpa \u0026lt;dbl\u0026gt;, home_wp_post \u0026lt;dbl\u0026gt;,\r## # away_wp_post \u0026lt;dbl\u0026gt;, vegas_wp \u0026lt;dbl\u0026gt;, vegas_home_wp \u0026lt;dbl\u0026gt;,\r## # total_home_rush_wpa \u0026lt;dbl\u0026gt;, total_away_rush_wpa \u0026lt;dbl\u0026gt;,\r## # total_home_pass_wpa \u0026lt;dbl\u0026gt;, total_away_pass_wpa \u0026lt;dbl\u0026gt;, air_wpa \u0026lt;dbl\u0026gt;,\r## # yac_wpa \u0026lt;dbl\u0026gt;, comp_air_wpa \u0026lt;dbl\u0026gt;, comp_yac_wpa \u0026lt;dbl\u0026gt;,\r## # total_home_comp_air_wpa \u0026lt;dbl\u0026gt;, ...\rWe now have every play of the 2019 NFL season! The dataset is missing fantasy points, so we need to calculate them for the game we are interested in. Since we will reuse this calculation a lot, it’s best to write a function. I will call it calc_ff:\nYou can use . %\u0026gt;% to create a anonymous function. The function calculates the time, that has progressed since the start of a game in seconds, in order to sort it by this variable. This is necessary because we will use accumulate() to sum up the plays shortly.\nAfter that we will calculate the points. Every yards gained equals a tenth of a point, touchdowns give 6 points, if you fumble you will lose 2 points. This calculation is for the .5PPR format, so each reception will give you half a point. You get 2 points for a successful Two-Point-Conversion.\nAfter that, we accumulate the independent plays in order to get the total fantasy points up to that point.\nLastly, I used the relatively new but awesome function relocate() to display the points in front. We will also create a function to calculate for the whole season.\n(Note: This calculation will only work for skill positions, if you would like to analyze Quaterbacks you have to change the function a bit)\ncalc_ff \u0026lt;- . %\u0026gt;%\rarrange(desc(game_seconds_remaining)) %\u0026gt;%\rmutate(time_in_sec = 3600 - game_seconds_remaining) %\u0026gt;%\rmutate(\rff_points = yards_gained / 10,\rff_points = ifelse(touchdown, ff_points + 6, ff_points),\rff_points = ifelse(fumble_lost, ff_points - 2, ff_points),\rff_points = ifelse(play_type == \u0026quot;pass\u0026quot; \u0026amp; complete_pass, ff_points + .5, ff_points),\rff_points = ifelse(two_point_attempt \u0026amp; two_point_conv_result == \u0026quot;success\u0026quot;, 2, ff_points),\rff_points_sum = accumulate(ff_points, sum),\rff_points_total = last(ff_points_sum)\r) %\u0026gt;%\rrelocate(contains(\u0026quot;ff_points\u0026quot;), .before = play_id)\rcalc_ff_season \u0026lt;- . %\u0026gt;%\rgroup_by(game_date) %\u0026gt;%\rcalc_ff() %\u0026gt;%\rungroup()\rVisualization for NFl related things is a perfect opportunity to try out the package teamcolors.\nThere is a little bit of setup required to get it to work with our data\nlibrary(teamcolors)\r# Unfortunately Play-By-Play Data uses Abbreviations while Teamcolors uses full names\rteam_abbr \u0026lt;- tribble(\r~name, ~team_code,\r\u0026quot;Arizona Cardinals\u0026quot;, \u0026quot;ARI\u0026quot;,\r\u0026quot;Atlanta Falcons\u0026quot;, \u0026quot;ATL\u0026quot;,\r\u0026quot;Baltimore Ravens\u0026quot;, \u0026quot;BAL\u0026quot;,\r\u0026quot;Buffalo Bills\u0026quot;, \u0026quot;BUF\u0026quot;,\r\u0026quot;Carolina Panthers\u0026quot;, \u0026quot;CAR\u0026quot;,\r\u0026quot;Chicago Bears\u0026quot;, \u0026quot;CHI\u0026quot;,\r\u0026quot;Cincinnati Bengals\u0026quot;, \u0026quot;CIN\u0026quot;,\r\u0026quot;Cleveland Browns\u0026quot;, \u0026quot;CLE\u0026quot;,\r\u0026quot;Dallas Cowboys\u0026quot;, \u0026quot;DAL\u0026quot;,\r\u0026quot;Denver Broncos\u0026quot;, \u0026quot;DEN\u0026quot;,\r\u0026quot;Detroit Lions\u0026quot;, \u0026quot;DET\u0026quot;,\r\u0026quot;Green Bay Packers\u0026quot;, \u0026quot;GB\u0026quot;,\r\u0026quot;Houston Texans\u0026quot;, \u0026quot;HOU\u0026quot;,\r\u0026quot;Indianapolis Colts\u0026quot;, \u0026quot;IND\u0026quot;,\r\u0026quot;Jacksonville Jaguars\u0026quot;, \u0026quot;JAX\u0026quot;,\r\u0026quot;Kansas City Chiefs\u0026quot;, \u0026quot;KC\u0026quot;,\r\u0026quot;Los Angeles Chargers\u0026quot;, \u0026quot;LAC\u0026quot;,\r\u0026quot;Los Angeles Rams\u0026quot;, \u0026quot;LA\u0026quot;,\r\u0026quot;Miami Dolphins\u0026quot;, \u0026quot;MIA\u0026quot;,\r\u0026quot;Minnesota Vikings\u0026quot;, \u0026quot;MIN\u0026quot;,\r\u0026quot;New England Patriots\u0026quot;, \u0026quot;NE\u0026quot;,\r\u0026quot;New Orleans Saints\u0026quot;, \u0026quot;NO\u0026quot;,\r\u0026quot;New York Giants\u0026quot;, \u0026quot;NYG\u0026quot;,\r\u0026quot;New York Jets\u0026quot;, \u0026quot;NYJ\u0026quot;,\r\u0026quot;Oakland Raiders\u0026quot;, \u0026quot;LV\u0026quot;,\r\u0026quot;Philadelphia Eagles\u0026quot;, \u0026quot;PHI\u0026quot;,\r\u0026quot;Pittsburgh Steelers\u0026quot;, \u0026quot;PIT\u0026quot;,\r\u0026quot;San Francisco 49ers\u0026quot;, \u0026quot;SF\u0026quot;,\r\u0026quot;Seattle Seahawks\u0026quot;, \u0026quot;SEA\u0026quot;,\r\u0026quot;Tampa Bay Buccaneers\u0026quot;, \u0026quot;TB\u0026quot;,\r\u0026quot;Tennessee Titans\u0026quot;, \u0026quot;TEN\u0026quot;,\r\u0026quot;Washington Redskins\u0026quot;, \u0026quot;WAS\u0026quot;\r)\rteamcols \u0026lt;- filter(teamcolors, league == \u0026quot;nfl\u0026quot;) %\u0026gt;%\rleft_join(team_abbr, by = \u0026quot;name\u0026quot;) %\u0026gt;%\rselect(team_code, name, primary, secondary, logo)\rteamcols\r## # A tibble: 32 x 5\r## team_code name primary secondary logo ## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; ## 1 ARI Arizona Ca~ #97233f #000000 http://content.sportslogos.net/logos~\r## 2 ATL Atlanta Fa~ #a71930 #000000 http://content.sportslogos.net/logos~\r## 3 BAL Baltimore ~ #241773 #000000 http://content.sportslogos.net/logos~\r## 4 BUF Buffalo Bi~ #00338d #c60c30 http://content.sportslogos.net/logos~\r## 5 CAR Carolina P~ #0085ca #000000 http://content.sportslogos.net/logos~\r## 6 CHI Chicago Be~ #0b162a #c83803 http://content.sportslogos.net/logos~\r## 7 CIN Cincinnati~ #000000 #fb4f14 http://content.sportslogos.net/logos~\r## 8 CLE Cleveland ~ #fb4f14 #22150c http://content.sportslogos.net/logos~\r## 9 DAL Dallas Cow~ #002244 #b0b7bc http://content.sportslogos.net/logos~\r## 10 DEN Denver Bro~ #002244 #fb4f14 http://content.sportslogos.net/logos~\r## # ... with 22 more rows\rNow that we have the team abbreviations we can join with our dataset:\npbp \u0026lt;- pbp %\u0026gt;% left_join(teamcols, by = c(\u0026quot;posteam\u0026quot; = \u0026quot;team_code\u0026quot;))\rWe are finally ready to do some visualization.\n\rVisualization of weekly perfomances\rAs discussed earlier in this post, we will reuse the same plot a few times, so we should just write a function for it. We want to plot the performance of a player for a given week so those will be our arguments along with a plot title.\nI also would like to make the graph interactive, using the plotly package.\nFirst we filter out only the plays for our player (using his id) and the given week. The dataset now only contains plays from the specified week, where the player was involved as a receiver or runner, so on this data we can run our function to calculate his fantasy points.\ntext_disp will contain the text, that we want to display if you hover over an event. Events are either a Touchdown, which we will display as a red dot or a fumble, which will be a black dot.\nThe Line, that shows the Fantasy Points over Game Time will be colored in the primary color of the players team.\nEach quater will be seperated by a dashed vline. The rest of the code is necessary so that plotly won’t display labels for the time axis.\nEdit: Unfortunately Plotly does not seem to work in this environment, Plotly Plot will display, but in completely wrong dimensions. Therefore I will comment out the Plotly Part. The Rest won’t be changed so you could just run ggplotly(p, tooltip = \"text\") on your plot.\n# library(plotly)\rplot_week_performance \u0026lt;- function(player_id, week_nr, plot_title) {\rp \u0026lt;- pbp %\u0026gt;%\rfilter(\rreceiver_player_id == player_id | rusher_player_id == player_id,\rweek == week_nr\r) %\u0026gt;%\rcalc_ff() %\u0026gt;%\rarrange(time_in_sec) %\u0026gt;%\rmutate(text_disp = glue::glue(\u0026quot;Quater: {qtr}\\nDrive: {drive}\\nTime: {time}\\n\\nScore\\n{away_team}: {total_away_score}\\n{home_team}: {total_home_score}\\n\u0026quot;)) %\u0026gt;%\rggplot(aes(time_in_sec, ff_points_sum, color = primary)) +\rgeom_line(size = 1) +\rgeom_point(\rshape = 19, color = \u0026quot;red\u0026quot;, size = 2, data = . %\u0026gt;% filter(touchdown == T),\raes(time_in_sec, ff_points_sum, text = text_disp)\r) +\rgeom_point(\rshape = 19, color = \u0026quot;black\u0026quot;, size = 2, data = . %\u0026gt;% filter(fumble == T),\raes(time_in_sec, ff_points_sum, text = text_disp)\r) +\rgeom_vline(xintercept = c(900, 1800, 2700), alpha = .5, lty = 2) +\rexpand_limits(x = c(0, 3600)) +\rscale_x_continuous(labels = NULL, breaks = NULL) +\rscale_color_identity() +\rtheme_hubnr_thin() +\rlabs(\rtitle = plot_title,\rx = \u0026quot;Time\u0026quot;,\ry = \u0026quot;Fantasy Points\u0026quot;\r) +\rtheme(\rlegend.position = \u0026quot;none\u0026quot;,\raxis.ticks.x = element_blank(),\raxis.text.x = element_blank()\r)\r# ggplotly(p, tooltip = \u0026quot;text\u0026quot;)\rp\r}\rNow that we have our plot generating function, we should test it on some of the best fantasy performances of the last season.\nIn order to get results you need a player_id, which you can get by filtering the dataset for the specific player (Hint: Kenyan Drake would be ‘K.Drake’). I will omit this step for this post.\nKenyan Drake - Week 15 (and 16)\rLet’s start with Kenyan Drake. After a disappointing first half of the season on the Miami Dolphins, Drake got traded to the Arizona Cardinals, where he became fantasy gold immediatly. Especially his performances in the Fantasy Football playoffs made Kenyan Drake a League Winner\nplot_week_performance(\r\u0026quot;32013030-2d30-3033-3331-31385a388006\u0026quot;, 15,\r\u0026quot;Kenyan Drake - Week 15\u0026quot;\r)\rplot_week_performance(\r\u0026quot;32013030-2d30-3033-3331-31385a388006\u0026quot;, 16,\r\u0026quot;Kenyan Drake - Week 16\u0026quot;\r)\r\rChristian McCaffrey - Week 1\rMcCaffrey was awesome the whole season long (execpt week 2). He started the season off with an incredible performance, racking up 42.9 fantasy points. The insane thing about McCaffreys season is, that this wasn’t even his best fantasy performance (47.7 pts - Week 5 vs. Jax).\nplot_week_performance(\r\u0026quot;32013030-2d30-3033-3332-3830ec2c3be7\u0026quot;, 1,\r\u0026quot;Christian McCaffreye - Week 1\u0026quot;\r)\r\rAaron Jones - Week 5\rAaron Jones performance in Week 5 was spectacular. He was the running back, that scored the most points in a single game this season.\nplot_week_performance(\r\u0026quot;32013030-2d30-3033-3332-3933ed82c0de\u0026quot;, 5,\r\u0026quot;Aaron Jones - Week 5\u0026quot;\r)\r\rSammy Watkins - Week 1\rSimilar to McCaffrey, Sammy Watkins hat an unbelivable first week, scoring 46.8 points! Unfortuantely, unlike McCaffrey, he could not reproduce a similar performance again. In fact, Watkins Week 1 performance contributed more than a quater of his total points this season.\nplot_week_performance(\r\u0026quot;32013030-2d30-3033-3133-32353107e672\u0026quot;, 1,\r\u0026quot;Sammy Watkins - Week 1\u0026quot;\r)\r\rWill Fuller - Week 5\rSimilar to Watkins, Fuller also had one week, that outshined the rest of his season by a mile. He scored the most fantasy points in a game for a Wide Receiver this Year (53.7)\nplot_week_performance(\r\u0026quot;32013030-2d30-3033-3331-3237332aee05\u0026quot;, 5,\r\u0026quot;Will Fuller - Week 5\u0026quot;\r)\r\r\rVisualization of season perfomance\rNow that we looked at individual games, let’s have a look at the whole season of a player.\nTo do that we need to create one of these plots for every game and display them together using facet_wrap().\nLet’s create a function again. It’s will be very similar to the game plot function only a few things are different. We will color the odd weeks in the primary color and the even weeks in the secondary color of the players NFL team. We also need to convert week to factor in order to sort the facets.\nplot_season_performance \u0026lt;- function(player_id, plot_title) {\rpbp %\u0026gt;%\rfilter(receiver_player_id == player_id | rusher_player_id == player_id) %\u0026gt;%\rcalc_ff_season() %\u0026gt;%\rarrange(week) %\u0026gt;%\rmutate(\rline_color = ifelse(week %% 2 == 1, primary, secondary),\rweek_nr = week,\rweek = glue::glue(\u0026quot;Week {week} ({ff_points_total})\u0026quot;)\r) %\u0026gt;%\rmutate_at(vars(week), funs(factor(., levels = unique(.)))) %\u0026gt;%\rggplot(aes(time_in_sec, ff_points_sum)) +\rgeom_line(aes(color = line_color), size = 1) +\rgeom_point(\rshape = 19, color = \u0026quot;red\u0026quot;, size = 2, data = . %\u0026gt;% filter(touchdown == T),\raes(time_in_sec, ff_points_sum)\r) +\rgeom_point(\rshape = 19, color = \u0026quot;red\u0026quot;, size = 2, data = . %\u0026gt;% filter(touchdown == T),\raes(time_in_sec, ff_points_sum)\r) +\rscale_color_identity() +\rfacet_wrap(~week) +\rgeom_vline(xintercept = c(900, 1800, 2700), alpha = .5, lty = 2) +\rexpand_limits(x = c(0, 3600)) +\rscale_x_continuous(labels = NULL, breaks = NULL) +\rtheme_hubnr_thin(11) +\rlabs(\rtitle = plot_title,\rx = NULL,\ry = \u0026quot;Fantasy Points\u0026quot;\r) +\rtheme(strip.text.x = element_text(size = 11, face = \u0026quot;plain\u0026quot;))\r}\rNow we are able to look at performances over a whole season.\nChristian McCaffrey\rWithout a doubt the most valuable Running Back this season was Christian McCaffrey. Execpt for the previously mentioned Week 2 (and maybe Week 13) he was always great.\nplot_season_performance(\r\u0026quot;32013030-2d30-3033-3332-3830ec2c3be7\u0026quot;,\r\u0026quot;Christian McCaffrey - Fantasy Football Season 2019\u0026quot;\r)\r\rKenyan Drake\rAs mentioned earlier Drake had a bad first half, so his season wasn’t that great. I mainly picked him because you can see how the coloring work. Drake was on the Dolphins for the first 8 weeks of the season and after that played for the Cardinals. You can see the coloring of the plot chaning accordingly.\nplot_season_performance(\r\u0026quot;32013030-2d30-3033-3331-31385a388006\u0026quot;,\r\u0026quot;Kenyan Drake - Fantasy Football Season 2019\u0026quot;\r)\r\rMichael Thomas\rMichael Thomas was the best Wide Receiver for Fantasy in the 2019 season.\nplot_season_performance(\r\u0026quot;32013030-2d30-3033-3237-36359afa5261\u0026quot;,\r\u0026quot;Michael Thomas - Fantasy Football Season 2019\u0026quot;\r)\r\rTravis Kelce\rTravis Kelce was the best Tight End for Fantasy in the 2019 season.\nplot_season_performance(\r\u0026quot;32013030-2d30-3033-3035-3036654ef292\u0026quot;,\r\u0026quot;Travis Kelce - Fantasy Football Season 2019\u0026quot;\r)\r\r\r","date":1597708800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1597761200,"objectID":"4faad3a3e64e426528ba5a4d06ca5632","permalink":"/post/visualizing-the-best-fantasy-football-performances-of-the-2019-season/","publishdate":"2020-08-18T00:00:00Z","relpermalink":"/post/visualizing-the-best-fantasy-football-performances-of-the-2019-season/","section":"post","summary":"With the Fantasy Football season only a few weeks away, I decided to look back at the 2019 season and the greatest weekly performances.\nIn this post I will try to visualize the best weekly performances as well as the performance of the best players over the whole season.","tags":["R","rstats","nfl","fantasy-football"],"title":"Visualizing the Best Fantasy Football Performances of the 2019 Season","type":"post"},{"authors":[],"categories":["R","rstats"],"content":"\r\rSeit ein paar Jahren ist Steam verprlichtet alle persönlichen Daten über einen offen zu legen. Das schließt auch einen Spielverlauf mit ein. Über diesen Weg kann man\n#Extract Raw Tables\r#Every Match Has Two Tables:\r#Left Contains Gerneral Information about the Game, e.g. Duration, Map\r#Right Contains Information about players, like the ingame Scoreboard\rright_html_data \u0026lt;- read_html(\u0026quot;./data/steam_data.html\u0026quot;) %\u0026gt;% html_nodes(\u0026quot;.csgo_scoreboard_inner_right\u0026quot;) %\u0026gt;% html_table()\rleft_html_data \u0026lt;- read_html(\u0026quot;./data/steam_data.html\u0026quot;) %\u0026gt;% html_nodes(\u0026quot;.csgo_scoreboard_inner_left\u0026quot;) %\u0026gt;% html_table()\rextract_right_side \u0026lt;- function(right_table) {\rscore_extr \u0026lt;- right_table %\u0026gt;% filter(row_number() == 6) %\u0026gt;% pull(Score) %\u0026gt;% str_extract_all(., \u0026quot;\\\\d+\u0026quot;) #Extract Game Score (Always in Row 6)\rright_table %\u0026gt;% as_tibble() %\u0026gt;% rename(mvp = 6) %\u0026gt;% clean_names() %\u0026gt;% mutate(team_id = ifelse(row_number() \u0026lt;= 5,1,2),\rscore_t1 = score_extr[[1]][1],\rscore_t2 = score_extr[[1]][2],\rmvp = str_replace(mvp, \u0026quot;\\\\u2605\u0026quot; , \u0026quot;star\u0026quot;),\rmvp = ifelse(mvp == \u0026quot;star\u0026quot;,1, mvp),\rmvp = parse_number(mvp),\rmvp = ifelse(is.na(mvp),0,mvp),\rhsp = parse_number(hsp)) %\u0026gt;% filter(row_number() != 6)\r}\rextract_left_side \u0026lt;- function(left_table) {\rtibble(map = left_table[1][1,1],\rtimestamp = left_table[1][2,1],\rwait_time = str_extract(left_table[1][3,1],\u0026quot;\\\\d+:\\\\d+\u0026quot;),\rmatch_duration = str_extract(left_table[1][4,1],\u0026quot;\\\\d+:\\\\d+\u0026quot;)) %\u0026gt;% slice(rep(1:n(), each = 10))\r}\rright_data \u0026lt;- lapply(right_html_data, extract_right_side) %\u0026gt;% bind_rows()\rleft_data \u0026lt;- lapply(left_html_data, extract_left_side) %\u0026gt;% bind_rows()\rcs_data \u0026lt;- left_data %\u0026gt;%\rbind_cols(right_data) %\u0026gt;%\rmutate(game_id = (row_number() - 1) %/% 10)\rcs_data\r## # A tibble: 2,210 x 16\r## map timestamp wait_time match_duration player_name ping k a d ## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt;\r## 1 Comp~ 2020-05-~ 00:12 32:31 Sergio Mar~ 43 17 5 18 ## 2 Comp~ 2020-05-~ 00:12 32:31 Dadix 45 13 4 21 ## 3 Comp~ 2020-05-~ 00:12 32:31 dex6y 30 10 6 19 ## 4 Comp~ 2020-05-~ 00:12 32:31 duk5x 35 12 0 20 ## 5 Comp~ 2020-05-~ 00:12 32:31 \u0026lt;U+2764\u0026gt; St\u0026lt;U+03AD\u0026gt;fa\u0026lt;U+03BD\u0026gt; -~ 48 10 1 18 ## 6 Comp~ 2020-05-~ 00:12 32:31 /SlasH/ 57 26 5 12 ## 7 Comp~ 2020-05-~ 00:12 32:31 ShokoN 31 21 4 13 ## 8 Comp~ 2020-05-~ 00:12 32:31 CERNVNN0S 24 16 4 13 ## 9 Comp~ 2020-05-~ 00:12 32:31 add instag~ 17 17 2 14 ## 10 Comp~ 2020-05-~ 00:12 32:31 Awesome 49 14 2 12 ## # ... with 2,200 more rows, and 7 more variables: mvp \u0026lt;dbl\u0026gt;, hsp \u0026lt;dbl\u0026gt;,\r## # score \u0026lt;chr\u0026gt;, team_id \u0026lt;dbl\u0026gt;, score_t1 \u0026lt;chr\u0026gt;, score_t2 \u0026lt;chr\u0026gt;, game_id \u0026lt;dbl\u0026gt;\r","date":1588636800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1588706074,"objectID":"b561d5b3a670e09289e01dfeba4619dd","permalink":"/post/cs-go-scrape/","publishdate":"2020-05-05T00:00:00Z","relpermalink":"/post/cs-go-scrape/","section":"post","summary":"Seit ein paar Jahren ist Steam verprlichtet alle persönlichen Daten über einen offen zu legen. Das schließt auch einen Spielverlauf mit ein. Über diesen Weg kann man\n#Extract Raw Tables\r#Every Match Has Two Tables:\r#Left Contains Gerneral Information about the Game, e.","tags":["R","rstats"],"title":"Scraping Counter Strike Match History","type":"post"},{"authors":[],"categories":["rstats","R"],"content":"\r\rMäxchen is a popular german dice game. It’s not complex at all, so it can be played by everybody from young to old. While playing it during the last family gathering I wondered what the ideal decisions in this game are. It is quite simple and you can pretty much play it instantly but I wanted to know the exact chances of winning for each dice result. In this blogpost I will simulate playing the game and analyze what your chances of winning are. The rules for this game allow you to lie about your result, but we won’t get into that. Lets get started!\nBrief Game Rules\rIn this game you roll two dices. The higher dice represents the first digit, the lower one the second digit of your result. For example: 1,3 will get you 31; 2,5 will get you 52; 1,1 will get you 11.\nThe best Result one might get is 21 also called Mäxchen. The next highest results are the rolls, where both digits match (11,22,33,etc.) with 66 being the highest and therefore 11 the worst one. After that, the higher your roll the better.\n\rSimulation\rFirst we need to simulate the dice rolls. I usually write a function for one simulation, so I will do it here as well:\nroll_game \u0026lt;- function() {\rr1 \u0026lt;- sample(6, 1)\rr2 \u0026lt;- sample(6, 1)\rif (r1 \u0026gt; r2) {\rr1 * 10 + r2\r} else {\rr2 * 10 + r1\r}\r}\rroll_game()\r## [1] 32\rroll_game()\r## [1] 32\rroll_game()\r## [1] 61\rI use the sample-Function to generate the dice rolls. After we generated each dice we need to order it to match the rules of the game. These two steps are all we need to do in order to simulate one roll of the game. Lets expand this to simulate a bunch of games.\nsimulation \u0026lt;- tibble(sim = 1:1e6) %\u0026gt;%\rmutate(roll = replicate(n(), roll_game()))\rsimulation\r## # A tibble: 1,000,000 x 2\r## sim roll\r## \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 1 22\r## 2 2 32\r## 3 3 54\r## 4 4 53\r## 5 5 54\r## 6 6 65\r## 7 7 63\r## 8 8 31\r## 9 9 64\r## 10 10 62\r## # ... with 999,990 more rows\rNow we have generated a million rolls (in a few seconds).\norder \u0026lt;- c(15, 21, 16, 1, 2, 17, 3, 4, 5, 18, 6, 7, 8, 9, 19, 10, 11, 12, 13, 14, 20)\rdist \u0026lt;- simulation %\u0026gt;%\rcount(roll) %\u0026gt;%\rmutate(\rprob = n / 1e6,\rroll = as.factor(roll),\rorder = order\r) %\u0026gt;%\rarrange(order)\rdist\r## # A tibble: 21 x 4\r## roll n prob order\r## \u0026lt;fct\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 31 56058 0.0561 1\r## 2 32 55932 0.0559 2\r## 3 41 55889 0.0559 3\r## 4 42 55449 0.0554 4\r## 5 43 55083 0.0551 5\r## 6 51 55332 0.0553 6\r## 7 52 55687 0.0557 7\r## 8 53 55580 0.0556 8\r## 9 54 55673 0.0557 9\r## 10 61 55367 0.0554 10\r## # ... with 11 more rows\rAs explained before the game has a special order in which they results are sorted. The Vector order maps that sequence to the default numerical order, e.g. 31 is the 4th lowest number you can roll but is the worst result you can get in this game (11,21,22 are valued higher). We count the occurence of each dice result.\ndist %\u0026gt;%\rmutate(roll = fct_inorder(roll)) %\u0026gt;%\rggplot(aes(roll, prob)) +\rgeom_col(fill = \u0026quot;darkred\u0026quot;) +\rlabs(\rtitle = \u0026quot;Probability Distribution for \u0026#39;Mäxchen\u0026#39;\u0026quot;,\rx = \u0026quot;Result\u0026quot;,\ry = \u0026quot;Probability\u0026quot;\r) +\rscale_y_continuous(labels = scales::percent_format()) +\rtheme(axis.text.x = element_text(angle = 45, hjust = 1))\rIf you think about it, this result was pretty obvious. For every result without equal digits you have two ways of archiving it: first digit on first dice and second digit on second dice or the other way around. If your result has equal digits you only have one. Thus, the exact chance of every result is 5.556% or 2.778% for same digits results.\nbeat_prob \u0026lt;- dist %\u0026gt;%\rmutate(\rprob = ifelse(roll %in% c(11, 22, 33, 44, 55, 66), 1 / 36, 2 / 36),\rprob_sum = cumsum(prob),\rbeat = 1 - prob_sum\r)\rbeat_prob\r## # A tibble: 21 x 6\r## roll n prob order prob_sum beat\r## \u0026lt;fct\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 31 56058 0.0556 1 0.0556 0.944\r## 2 32 55932 0.0556 2 0.111 0.889\r## 3 41 55889 0.0556 3 0.167 0.833\r## 4 42 55449 0.0556 4 0.222 0.778\r## 5 43 55083 0.0556 5 0.278 0.722\r## 6 51 55332 0.0556 6 0.333 0.667\r## 7 52 55687 0.0556 7 0.389 0.611\r## 8 53 55580 0.0556 8 0.444 0.556\r## 9 54 55673 0.0556 9 0.5 0.5 ## 10 61 55367 0.0556 10 0.556 0.444\r## # ... with 11 more rows\rSince we now know the exact probability we change our values from the simulation accordingly. We calculate the cumulative sum for every roll. This value represents how likely we roll something worse or as bad as the respective roll. Since we wanna know the probability to beat a roll we have to subtract the calculated probability from 1. Let’s plot the result:\nbeat_prob %\u0026gt;%\rmutate(roll = fct_inorder(roll)) %\u0026gt;%\rggplot(aes(roll, beat)) +\rgeom_col(fill = \u0026quot;darkred\u0026quot;) +\rgeom_text(aes(label = percent(beat)), family = \u0026quot;Roboto\u0026quot;, vjust = -.8, size = 3) +\rlabs(\rtitle = \u0026quot;Probability of beating a result in \u0026#39;Mäxchen\u0026#39;\u0026quot;,\rx = \u0026quot;Result\u0026quot;,\ry = \u0026quot;Probability\u0026quot;\r) +\rscale_y_continuous(labels = scales::percent_format()) +\rtheme(axis.text.x = element_text(angle = 45, hjust = 1))\rAdmittedly, the result is not that surprising and frankly pretty basic math. Though if you wanna know how good your chances of beating a result are, you can look at this pretty plot from now on.\n\r","date":1588550400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1588611282,"objectID":"a0c666de5a4ce4e6e2d76a84ab1a0d10","permalink":"/post/maexchen-game/","publishdate":"2020-05-04T00:00:00Z","relpermalink":"/post/maexchen-game/","section":"post","summary":"Mäxchen is a popular german dice game. It’s not complex at all, so it can be played by everybody from young to old. While playing it during the last family gathering I wondered what the ideal decisions in this game are.","tags":["rstats","R"],"title":"Examining Win Probabilities Playing Maexchen","type":"post"},{"authors":null,"categories":null,"content":"","date":1577836800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1577836800,"objectID":"8576ec274c98b3831668a172fa632d80","permalink":"/about/","publishdate":"2020-01-01T00:00:00Z","relpermalink":"/about/","section":"","summary":"About","tags":null,"title":"About","type":"widget_page"},{"authors":null,"categories":["R"],"content":"\r\rR Markdown\rThis is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com.\nYou can embed an R code chunk like this:\nsummary(cars)\r## speed dist ## Min. : 4.0 Min. : 2.00 ## 1st Qu.:12.0 1st Qu.: 26.00 ## Median :15.0 Median : 36.00 ## Mean :15.4 Mean : 42.98 ## 3rd Qu.:19.0 3rd Qu.: 56.00 ## Max. :25.0 Max. :120.00\rfit \u0026lt;- lm(dist ~ speed, data = cars)\rfit\r## ## Call:\r## lm(formula = dist ~ speed, data = cars)\r## ## Coefficients:\r## (Intercept) speed ## -17.579 3.932\r\rIncluding Plots\rYou can also embed plots. See Figure 1 for example:\npar(mar = c(0, 1, 0, 1))\rpie(\rc(280, 60, 20),\rc(\u0026#39;Sky\u0026#39;, \u0026#39;Sunny side of pyramid\u0026#39;, \u0026#39;Shady side of pyramid\u0026#39;),\rcol = c(\u0026#39;#0292D8\u0026#39;, \u0026#39;#F7EA39\u0026#39;, \u0026#39;#C4B632\u0026#39;),\rinit.angle = -50, border = NA\r)\r\rFigure 1: A fancy pie chart.\r\r\r","date":1437703994,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1437703994,"objectID":"10065deaa3098b0da91b78b48d0efc71","permalink":"/post/2015-07-23-r-rmarkdown/","publishdate":"2015-07-23T21:13:14-05:00","relpermalink":"/post/2015-07-23-r-rmarkdown/","section":"post","summary":"R Markdown\rThis is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.","tags":["R Markdown","plot","regression"],"title":"Hello R Markdown","type":"post"}]