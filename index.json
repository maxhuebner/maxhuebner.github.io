[{"authors":["admin"],"categories":null,"content":"Computer Science Student from Germany interested in Data Science.\n","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"/author/max-hubner/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/max-hubner/","section":"authors","summary":"Computer Science Student from Germany interested in Data Science.","tags":null,"title":"Max Hübner","type":"authors"},{"authors":[],"categories":["rstats","R","game"],"content":"\rMäxchen is a popular german dice game. Its not complex at all, so it can be played by everybody from young to old. While playing it during the last family gathering I wondered what the optimal decicions in this game are. It is quite simple and you can pretty much play it instantly but i wanted to know the exact chances of winning for each dice result. In this blogpost I will simulate playing the game and analyze what your chances of winning are. The rules for this game allow you to lie about your result, but we won’t get into that. Lets get started!\nBrief Game Rules\rIn this game you roll two dices. The higher dice represents the first digit, the lower one the second digit of your result. For example: 1,3 will get you 31; 2,5 will get you 52; 1,1 will get you 11.\nThe best Result one might get is 21 also called Mäxchen. The next highest results are the rolls, where both digits match (11,22,33,etc.) with 66 being the highest and therefore 11 the worst one. After that, the higher your roll the better.\n\rSimulation\rFirst we need to simulate the dice rolls. I usually write a function for one simulation, so i will do it here as well:\nroll_game \u0026lt;- function() {\rr1 \u0026lt;- sample(6,1)\rr2 \u0026lt;- sample(6,1)\rif (r1 \u0026gt; r2) {\rr1 * 10 + r2\r} else {\rr2 * 10 + r1\r}\r}\rroll_game()\r## [1] 32\rroll_game()\r## [1] 31\rroll_game()\r## [1] 22\rI use the sample-Function to generate the dice rolls. After we generated each dice we need to order it to match the rules of the game. These two steps is all we need to do to simulate one roll of the game. Lets expand this to simulate a bunch of games.\nsimulation \u0026lt;- tibble(sim = 1:1e6) %\u0026gt;% mutate(roll = replicate(n(),roll_game()))\rsimulation\r## # A tibble: 1,000,000 x 2\r## sim roll\r## \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 1 63\r## 2 2 42\r## 3 3 63\r## 4 4 22\r## 5 5 62\r## 6 6 66\r## 7 7 54\r## 8 8 54\r## 9 9 54\r## 10 10 53\r## # ... with 999,990 more rows\rNow we have generated a million rolls (in a few seconds).\norder \u0026lt;- c(15,21,16,1,2,17,3,4,5,18,6,7,8,9,19,10,11,12,13,14,20)\rdist \u0026lt;- simulation %\u0026gt;% count(roll) %\u0026gt;% mutate(prob = n / 1e6,\rroll = as.factor(roll),\rorder = order) %\u0026gt;% arrange(order)\rdist\r## # A tibble: 21 x 4\r## roll n prob order\r## \u0026lt;fct\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 31 55365 0.0554 1\r## 2 32 55858 0.0559 2\r## 3 41 55410 0.0554 3\r## 4 42 55350 0.0554 4\r## 5 43 55872 0.0559 5\r## 6 51 55411 0.0554 6\r## 7 52 55502 0.0555 7\r## 8 53 55562 0.0556 8\r## 9 54 55674 0.0557 9\r## 10 61 55828 0.0558 10\r## # ... with 11 more rows\rAs explained before the game has a special order in which they results are sorted. The Vector order maps that sequence to the default numerical order, e.g 31 is the 4th lowest number you can roll but is the worst result you can get in this game. We count the occurence of each dice result.\ndist %\u0026gt;% mutate(roll = fct_inorder(roll)) %\u0026gt;% ggplot(aes(roll,prob)) +\rgeom_col(fill = \u0026#39;darkred\u0026#39;) + labs(title = \u0026quot;Probability Distribution for \u0026#39;Mäxchen\u0026#39;\u0026quot;,\rx = \u0026quot;Result\u0026quot;,\ry = \u0026quot;Probability\u0026quot;) +\rscale_y_continuous(labels = scales::percent_format()) +\rtheme(axis.text.x = element_text(angle = 45, hjust = 1))\rIf you think about it, this result was pretty obvious. For every result without equal digits you have two ways of archiving it: first digit on first dice and second digit on second dice or the other way around. If your result has equal digits you only have one. Thus, the exact probability of every result is 5.556% or 2.778% for same digits results.\nbeat_prob \u0026lt;- dist %\u0026gt;% mutate(prob = ifelse(roll %in% c(11,22,33,44,55,66), 1/36, 2/36),\rprob_sum = cumsum(prob),\rbeat = 1 - prob_sum)\rbeat_prob\r## # A tibble: 21 x 6\r## roll n prob order prob_sum beat\r## \u0026lt;fct\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 31 55365 0.0556 1 0.0556 0.944\r## 2 32 55858 0.0556 2 0.111 0.889\r## 3 41 55410 0.0556 3 0.167 0.833\r## 4 42 55350 0.0556 4 0.222 0.778\r## 5 43 55872 0.0556 5 0.278 0.722\r## 6 51 55411 0.0556 6 0.333 0.667\r## 7 52 55502 0.0556 7 0.389 0.611\r## 8 53 55562 0.0556 8 0.444 0.556\r## 9 54 55674 0.0556 9 0.5 0.5 ## 10 61 55828 0.0556 10 0.556 0.444\r## # ... with 11 more rows\rSince we now know the exact probability we change our values from the simulation accordingly. We calculate the cumulative sum for every roll. This value represents how likely we roll something worse or as bad as the respective roll. Since we wanna know the probability to beat a roll we have to subtract the calculated probability from 1. Let’s plot the result:\nbeat_prob %\u0026gt;% mutate(roll = fct_inorder(roll)) %\u0026gt;% ggplot(aes(roll, beat)) +\rgeom_col(fill = \u0026#39;darkred\u0026#39;) +\rgeom_text(aes(label = percent(beat)), family = \u0026#39;Roboto\u0026#39;, vjust = -.8) +\rlabs(title = \u0026quot;Probability of beating a result in \u0026#39;Mäxchen\u0026#39;\u0026quot;,\rx = \u0026quot;Result\u0026quot;,\ry = \u0026quot;Probability\u0026quot;) +\rscale_y_continuous(labels = scales::percent_format()) +\rtheme(axis.text.x = element_text(angle = 45, hjust = 1))\rAdmittedly, the result is not that surprising and frankly pretty basic math. Though if you wanna know how good your chances of beating a result are, you can look at this pretty plot from now on.\n\r","date":1588550400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1588611282,"objectID":"a0c666de5a4ce4e6e2d76a84ab1a0d10","permalink":"/post/maexchen-game/","publishdate":"2020-05-04T00:00:00Z","relpermalink":"/post/maexchen-game/","section":"post","summary":"Mäxchen is a popular german dice game. Its not complex at all, so it can be played by everybody from young to old. While playing it during the last family gathering I wondered what the optimal decicions in this game are.","tags":["rstats","R","game"],"title":"Examining Win Probabilities Playing Maexchen","type":"post"},{"authors":null,"categories":null,"content":"","date":1577836800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1577836800,"objectID":"8576ec274c98b3831668a172fa632d80","permalink":"/about/","publishdate":"2020-01-01T00:00:00Z","relpermalink":"/about/","section":"","summary":"About","tags":null,"title":"About","type":"widget_page"},{"authors":null,"categories":["R"],"content":"\rR Markdown\rThis is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com.\nYou can embed an R code chunk like this:\nsummary(cars)\r## speed dist ## Min. : 4.0 Min. : 2.00 ## 1st Qu.:12.0 1st Qu.: 26.00 ## Median :15.0 Median : 36.00 ## Mean :15.4 Mean : 42.98 ## 3rd Qu.:19.0 3rd Qu.: 56.00 ## Max. :25.0 Max. :120.00\rfit \u0026lt;- lm(dist ~ speed, data = cars)\rfit\r## ## Call:\r## lm(formula = dist ~ speed, data = cars)\r## ## Coefficients:\r## (Intercept) speed ## -17.579 3.932\r\rIncluding Plots\rYou can also embed plots. See Figure 1 for example:\npar(mar = c(0, 1, 0, 1))\rpie(\rc(280, 60, 20),\rc(\u0026#39;Sky\u0026#39;, \u0026#39;Sunny side of pyramid\u0026#39;, \u0026#39;Shady side of pyramid\u0026#39;),\rcol = c(\u0026#39;#0292D8\u0026#39;, \u0026#39;#F7EA39\u0026#39;, \u0026#39;#C4B632\u0026#39;),\rinit.angle = -50, border = NA\r)\r\rFigure 1: A fancy pie chart.\r\r\r","date":1437703994,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1437703994,"objectID":"10065deaa3098b0da91b78b48d0efc71","permalink":"/post/2015-07-23-r-rmarkdown/","publishdate":"2015-07-23T21:13:14-05:00","relpermalink":"/post/2015-07-23-r-rmarkdown/","section":"post","summary":"R Markdown\rThis is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.","tags":["R Markdown","plot","regression"],"title":"Hello R Markdown","type":"post"}]