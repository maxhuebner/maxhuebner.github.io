<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Max Hübner</title>
    <link>/</link>
      <atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <description>Max Hübner</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>© Max Hübner 2020</copyright><lastBuildDate>Wed, 01 Jan 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/images/icon_hubdc61f67c4acee99af4fb8a14828136d_14904_512x512_fill_lanczos_center_2.png</url>
      <title>Max Hübner</title>
      <link>/</link>
    </image>
    
    <item>
      <title>Draft Bargains 2020 (Sleeper)</title>
      <link>/post/draft-bargains-2020-sleeper/</link>
      <pubDate>Tue, 18 Aug 2020 00:00:00 +0000</pubDate>
      <guid>/post/draft-bargains-2020-sleeper/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;(&lt;strong&gt;EDIT&lt;/strong&gt; (01.09.2020): Updated Version, since today is my Fantasy Draft)&lt;/p&gt;
&lt;p&gt;Every year I try to compare the rankings on the fantasy football site I play on with consensus expert rankings in order to find exploits.&lt;br /&gt;
If a player is goes way earlier than he is evalued by experts, I will probably not draft him at all as it is not a good value.&lt;br /&gt;
If a player goes way later than projected by experts, I will maybe draft him, but I might get him later than I should be, hence the name &lt;strong&gt;Draft Bargain&lt;/strong&gt;.&lt;br /&gt;
In this post we will compare the consensus Expert Ranking on &lt;a href=&#34;https://www.fantasypros.com/nfl/rankings/half-point-ppr-cheatsheets.php&#34;&gt;FantasyPros&lt;/a&gt; with the previously scraped in-draft rankings from Sleeper. If you want to know how to do this, read &lt;a href=&#34;https://maxhuebner.github.io/post/scraping-rankings-from-sleeper-with-selenium/&#34;&gt;my latest blog post&lt;/a&gt;.&lt;/p&gt;
&lt;div id=&#34;data-gathering&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Data Gathering&lt;/h3&gt;
&lt;p&gt;First, we should load our scraped mock ranks. Since we are only interested in &lt;em&gt;skill positions&lt;/em&gt; and Quaterbacks, we remove everything else.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sleeper_ranks &amp;lt;- 
  #read_csv(&amp;quot;https://maxhuebner.github.io/post/data/sleeper-mock-ranks-2020-09-01.csv&amp;quot;) %&amp;gt;%
  read_csv(&amp;quot;https://raw.githubusercontent.com/maxhuebner/maxhuebner.github.io/master/post/data/sleeper-mock-ranks-2020-09-01.csv&amp;quot;) %&amp;gt;% 
  filter((pos %in% c(&amp;quot;QB&amp;quot;,&amp;quot;RB&amp;quot;,&amp;quot;WR&amp;quot;,&amp;quot;TE&amp;quot;)))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, we need data to compare. Let’s scrape the data from the FantasyPros-website using the package &lt;em&gt;rvest&lt;/em&gt;. The Data is stored in a &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; tag so we can us rvest’s function &lt;code&gt;html_table()&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;fantasypros_url &amp;lt;- &amp;quot;https://www.fantasypros.com/nfl/rankings/half-point-ppr-cheatsheets.php&amp;quot;

fp_html &amp;lt;- read_html(fantasypros_url) %&amp;gt;% 
  html_table(fill = T) %&amp;gt;% 
  .[[1]] %&amp;gt;% 
  as_tibble() %&amp;gt;% 
  janitor::clean_names()

fp_html&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 510 x 12
##    rank  wsid  overall_team pos   bye   best  worst avg   std_dev adp   vs_adp
##    &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;        &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; 
##  1 &amp;amp;nbsp &amp;quot;&amp;amp;nb~ &amp;quot;&amp;amp;nbsp&amp;quot;      &amp;quot;&amp;amp;nb~ &amp;quot;&amp;amp;nb~ &amp;quot;&amp;amp;nb~ &amp;quot;&amp;amp;nb~ &amp;quot;&amp;amp;nb~ &amp;quot;&amp;amp;nbsp&amp;quot; &amp;quot;&amp;amp;nb~ &amp;quot;&amp;amp;nbs~
##  2 Tier~ &amp;quot;&amp;quot;    &amp;quot;&amp;quot;           &amp;quot;&amp;quot;    &amp;quot;&amp;quot;    &amp;quot;&amp;quot;    &amp;quot;&amp;quot;    &amp;quot;&amp;quot;    &amp;quot;&amp;quot;      &amp;quot;&amp;quot;    &amp;quot;&amp;quot;    
##  3 1     &amp;quot;&amp;quot;    &amp;quot;Christian ~ &amp;quot;RB1&amp;quot; &amp;quot;13&amp;quot;  &amp;quot;1&amp;quot;   &amp;quot;4&amp;quot;   &amp;quot;1.1&amp;quot; &amp;quot;0.3&amp;quot;   &amp;quot;1.0&amp;quot; &amp;quot;0.0&amp;quot; 
##  4 2     &amp;quot;&amp;quot;    &amp;quot;Saquon Bar~ &amp;quot;RB2&amp;quot; &amp;quot;11&amp;quot;  &amp;quot;1&amp;quot;   &amp;quot;5&amp;quot;   &amp;quot;2.1&amp;quot; &amp;quot;0.5&amp;quot;   &amp;quot;2.0&amp;quot; &amp;quot;0.0&amp;quot; 
##  5 3     &amp;quot;&amp;quot;    &amp;quot;Ezekiel El~ &amp;quot;RB3&amp;quot; &amp;quot;10&amp;quot;  &amp;quot;2&amp;quot;   &amp;quot;17&amp;quot;  &amp;quot;3.5&amp;quot; &amp;quot;1.7&amp;quot;   &amp;quot;3.0&amp;quot; &amp;quot;0.0&amp;quot; 
##  6 4     &amp;quot;&amp;quot;    &amp;quot;Alvin Kama~ &amp;quot;RB4&amp;quot; &amp;quot;6&amp;quot;   &amp;quot;3&amp;quot;   &amp;quot;12&amp;quot;  &amp;quot;4.7&amp;quot; &amp;quot;1.3&amp;quot;   &amp;quot;5.0&amp;quot; &amp;quot;+1.0&amp;quot;
##  7 5     &amp;quot;&amp;quot;    &amp;quot;Michael Th~ &amp;quot;WR1&amp;quot; &amp;quot;6&amp;quot;   &amp;quot;3&amp;quot;   &amp;quot;14&amp;quot;  &amp;quot;6.2&amp;quot; &amp;quot;2.6&amp;quot;   &amp;quot;4.0&amp;quot; &amp;quot;-1.0&amp;quot;
##  8 6     &amp;quot;&amp;quot;    &amp;quot;Dalvin Coo~ &amp;quot;RB5&amp;quot; &amp;quot;7&amp;quot;   &amp;quot;2&amp;quot;   &amp;quot;21&amp;quot;  &amp;quot;6.8&amp;quot; &amp;quot;2.5&amp;quot;   &amp;quot;7.0&amp;quot; &amp;quot;+1.0&amp;quot;
##  9 Tier~ &amp;quot;&amp;quot;    &amp;quot;&amp;quot;           &amp;quot;&amp;quot;    &amp;quot;&amp;quot;    &amp;quot;&amp;quot;    &amp;quot;&amp;quot;    &amp;quot;&amp;quot;    &amp;quot;&amp;quot;      &amp;quot;&amp;quot;    &amp;quot;&amp;quot;    
## 10 7     &amp;quot;&amp;quot;    &amp;quot;Derrick He~ &amp;quot;RB6&amp;quot; &amp;quot;7&amp;quot;   &amp;quot;2&amp;quot;   &amp;quot;28&amp;quot;  &amp;quot;8.3&amp;quot; &amp;quot;3.2&amp;quot;   &amp;quot;6.0&amp;quot; &amp;quot;-1.0&amp;quot;
## # ... with 500 more rows, and 1 more variable: notes &amp;lt;lgl&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Unfortunately the data/table is not perfect, so we need to do a bit of data cleaning:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Get rid of rows with non numeric rows (&lt;code&gt;as.numeric(rank)&lt;/code&gt; will make non numeric values &lt;code&gt;NA&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Extract name by matching everything up to the &lt;code&gt;.&lt;/code&gt; and trimming the last 2 characters&lt;/li&gt;
&lt;li&gt;Extract position by removing the number&lt;/li&gt;
&lt;li&gt;Extract the team by extracting at least two back to back capital letters (only team names matches this description)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After that, we change a few outliers so that our data is acceptable.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;fp_ranks &amp;lt;- fp_html %&amp;gt;% 
  mutate(rank = as.numeric(rank),
         name = str_extract(overall_team, &amp;quot;.*\\.&amp;quot;),
         name = str_sub(name, end = -3),
         pos = str_extract(pos, &amp;quot;[:upper:]*&amp;quot;),
         team = str_extract(overall_team, &amp;quot;[:upper:]{2,}&amp;quot;)) %&amp;gt;% 
  filter(!is.na(rank),
         pos %in% c(&amp;quot;QB&amp;quot;,&amp;quot;RB&amp;quot;,&amp;quot;WR&amp;quot;,&amp;quot;TE&amp;quot;)) %&amp;gt;% 
  select(rank, name, pos, team) %&amp;gt;%
  mutate(team = if_else(team == &amp;quot;JAC&amp;quot;, &amp;quot;JAX&amp;quot;, team),
         team = if_else(name == &amp;quot;Mark Ingram II&amp;quot;, &amp;quot;BAL&amp;quot;, team)) %&amp;gt;% 
  add_count(team) %&amp;gt;% 
  filter(n &amp;gt; 2) %&amp;gt;% 
  select(-n)

fp_ranks&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 412 x 4
##     rank name                pos   team 
##    &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;               &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;
##  1     1 Christian McCaffrey RB    CAR  
##  2     2 Saquon Barkley      RB    NYG  
##  3     3 Ezekiel Elliott     RB    DAL  
##  4     4 Alvin Kamara        RB    NO   
##  5     5 Michael Thomas      WR    NO   
##  6     6 Dalvin Cook         RB    MIN  
##  7     7 Derrick Henry       RB    TEN  
##  8     8 Davante Adams       WR    GB   
##  9     9 Joe Mixon           RB    CIN  
## 10    10 Julio Jones         WR    ATL  
## # ... with 402 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;merging-data&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Merging Data&lt;/h3&gt;
&lt;p&gt;In order to compare the data we should merge it in a single data frame (or in this case tibble). We want to join by name, position and team so every player has a &lt;code&gt;sleeper_rank&lt;/code&gt; and a &lt;code&gt;fp_rank&lt;/code&gt;.&lt;br /&gt;
The only problem: The names don’t match up perfectly. To fix that we have to use the awesome package &lt;a href=&#34;https://github.com/dgrtwo/fuzzyjoin&#34;&gt;fuzzyjoin&lt;/a&gt; by David Robinson. We will also use the package &lt;em&gt;stringdist&lt;/em&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(fuzzyjoin)
library(stringdist)

adp_tibble &amp;lt;- fp_ranks %&amp;gt;% 
  fuzzy_left_join(sleeper_ranks,
                  by = c(&amp;quot;pos&amp;quot;, &amp;quot;team&amp;quot;, &amp;quot;name&amp;quot;),
                  list(`==`,`==`,function(x,y) stringdist(tolower(x), tolower(y),
                                                           method=&amp;quot;osa&amp;quot;) &amp;lt;= 6)) %&amp;gt;%
  select(name = name.x, pos = pos.x, team = team.x,
         fp = rank.x, sleeper = rank.y) %&amp;gt;%
  filter(!is.na(sleeper)) %&amp;gt;%
  mutate(diff = sleeper-fp,
         category = as.factor(ifelse(diff &amp;gt; 0, &amp;quot;Steal&amp;quot;, &amp;quot;Overhyped&amp;quot;))) %&amp;gt;% 
  arrange(abs(diff)) %&amp;gt;% 
  distinct(name, team, pos, .keep_all = T)

adp_tibble&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 255 x 7
##    name                pos   team     fp sleeper  diff category 
##    &amp;lt;chr&amp;gt;               &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;fct&amp;gt;    
##  1 Christian McCaffrey RB    CAR       1       1     0 Overhyped
##  2 Saquon Barkley      RB    NYG       2       2     0 Overhyped
##  3 Joe Mixon           RB    CIN       9       9     0 Overhyped
##  4 Kenyan Drake        RB    ARI      17      17     0 Overhyped
##  5 Kareem Hunt         RB    CLE      62      62     0 Overhyped
##  6 Matt Breida         RB    MIA      86      86     0 Overhyped
##  7 Larry Fitzgerald    WR    ARI     183     183     0 Overhyped
##  8 Brian Hill          RB    ATL     281     281     0 Overhyped
##  9 Ezekiel Elliott     RB    DAL       3       4     1 Steal    
## 10 Alvin Kamara        RB    NO        4       3    -1 Overhyped
## # ... with 245 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We have three join columns. This &lt;code&gt;fuzzy_left_join()&lt;/code&gt; works the following way:&lt;br /&gt;
Join first and second column by exact match &lt;code&gt;==&lt;/code&gt;. Join third column (name) by a function that is true, if the stringdist of two names is less or equal 6.&lt;br /&gt;
Example: &lt;code&gt;stringdist(&#34;Patrick Mahomes&#34;, &#34;Pat Mahomes&#34;)&lt;/code&gt; would be 4, so it would still match our superstar quaterback. Difference of 6 seems like a lot, but we can’t match everyone with a smaller value and our overlap is minimal as well.&lt;/p&gt;
&lt;p&gt;We will also calculate the difference in the rankings. Negative Value means the player goes too early on sleeper, positive means that we might be able to snatch him a bit later. We label the players accordingly in a new column &lt;code&gt;category&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;comparing-data&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Comparing Data&lt;/h3&gt;
&lt;p&gt;After joining the data, we can analyze it. Nobody cares about &lt;em&gt;sleepers&lt;/em&gt; that go after round 13 so we will only look at Top100 players (in either ranking)&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;LIMIT &amp;lt;- 100

adp_compare &amp;lt;- adp_tibble %&amp;gt;% 
  arrange(desc(abs(diff))) %&amp;gt;% 
  filter(fp &amp;lt;= LIMIT | sleeper &amp;lt;= LIMIT)

steals &amp;lt;- adp_compare %&amp;gt;% 
  filter(category == &amp;quot;Steal&amp;quot;) %&amp;gt;% 
  select(-category)

overhyped &amp;lt;- adp_compare %&amp;gt;% 
  filter(category == &amp;quot;Overhyped&amp;quot;) %&amp;gt;% 
  select(-category)

steals&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 51 x 6
##    name              pos   team     fp sleeper  diff
##    &amp;lt;chr&amp;gt;             &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
##  1 Tarik Cohen       RB    CHI      88     120    32
##  2 Tyler Higbee      TE    LAR      77     106    29
##  3 Austin Hooper     TE    CLE      99     124    25
##  4 Josh Allen        QB    BUF      70      89    19
##  5 Matthew Stafford  QB    DET      90     109    19
##  6 D.J. Moore        WR    CAR      30      47    17
##  7 Odell Beckham Jr. WR    CLE      31      48    17
##  8 Courtland Sutton  WR    DEN      50      67    17
##  9 Allen Robinson    WR    CHI      24      40    16
## 10 DeVante Parker    WR    MIA      55      71    16
## # ... with 41 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;overhyped&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 54 x 6
##    name               pos   team     fp sleeper  diff
##    &amp;lt;chr&amp;gt;              &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
##  1 Deebo Samuel       WR    SF      123      75   -48
##  2 Mecole Hardman     WR    KC      147     100   -47
##  3 Rob Gronkowski     TE    TB      107      72   -35
##  4 Emmanuel Sanders   WR    NO      127      99   -28
##  5 Marlon Mack        RB    IND      91      69   -22
##  6 Alexander Mattison RB    MIN     113      96   -17
##  7 Aaron Rodgers      QB    GB       98      82   -16
##  8 Sony Michel        RB    NE      109      93   -16
##  9 David Montgomery   RB    CHI      52      37   -15
## 10 Devin Singletary   RB    BUF      57      42   -15
## # ... with 44 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;creating-tables&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Creating Tables&lt;/h3&gt;
&lt;p&gt;We now have two datasets &lt;code&gt;steals&lt;/code&gt; and &lt;code&gt;overhyped&lt;/code&gt; that contain the data we were interested in. However, it is not pleasant to look at the players in this format. Therefore we will create beatiful tables using the &lt;em&gt;gt&lt;/em&gt; package.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(gt)
#Table Options Shared
table_init_with_options &amp;lt;- . %&amp;gt;% 
  gt(groupname_col = &amp;quot;pos&amp;quot;, rownames_to_stub = T) %&amp;gt;% 
  tab_options(
    row_group.background.color = &amp;quot;#FFEFDB80&amp;quot;,#EFFBFC
    heading.background.color = &amp;quot;#ebebeb&amp;quot;,
    column_labels.background.color = &amp;quot;#ebebeb&amp;quot;,
    stub.background.color = &amp;quot;#ebebeb&amp;quot;,
    table.font.color = &amp;quot;#323232&amp;quot;,
    table_body.hlines.color = &amp;quot;#989898&amp;quot;,
    table_body.border.top.color = &amp;quot;#989898&amp;quot;,
    heading.border.bottom.color = &amp;quot;#989898&amp;quot;,
    row_group.border.top.color = &amp;quot;#989898&amp;quot;,
    row_group.border.bottom.style = &amp;quot;none&amp;quot;,
    stub.border.style = &amp;quot;dashed&amp;quot;,
    stub.border.color = &amp;quot;#989898&amp;quot;,
    stub.border.width = &amp;quot;1px&amp;quot;,
    table.width = &amp;quot;60%&amp;quot;
  ) %&amp;gt;% 
  opt_all_caps() %&amp;gt;% 
  cols_align(align = &amp;quot;center&amp;quot;, columns = c(1,3:7))

MINIMUM_DIFFERENCE &amp;lt;- 8&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These are some options that we want to have for both our tables so we create a function for it. We also set the minimum difference to 8, so the table isn’t to crowded.&lt;/p&gt;
&lt;p&gt;Over Table with Player we &lt;strong&gt;don’t&lt;/strong&gt; want to draft looks like this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;overhyped %&amp;gt;% 
  filter(diff &amp;lt;= -MINIMUM_DIFFERENCE) %&amp;gt;% 
  table_init_with_options() %&amp;gt;% 
  tab_header(
    title = md(&amp;quot;Overhyped Players on *Sleeper.App*&amp;quot;),
    subtitle = &amp;quot;(Players that tend to go before their general ADP)&amp;quot;
  ) %&amp;gt;% 
  data_color(
    columns = vars(diff),
    colors = scales::col_numeric(
      palette = paletteer::paletteer_d(
        palette = &amp;quot;ggsci::red_material&amp;quot;
      ) %&amp;gt;% as.character(),
      domain = NULL,
      reverse = T
    ),
    alpha = 0.8
  )&lt;/code&gt;&lt;/pre&gt;
&lt;style&gt;html {
  font-family: -apple-system, BlinkMacSystemFont, &#39;Segoe UI&#39;, Roboto, Oxygen, Ubuntu, Cantarell, &#39;Helvetica Neue&#39;, &#39;Fira Sans&#39;, &#39;Droid Sans&#39;, Arial, sans-serif;
}

#sgruksazbm .gt_table {
  display: table;
  border-collapse: collapse;
  margin-left: auto;
  margin-right: auto;
  color: #323232;
  font-size: 16px;
  font-weight: normal;
  font-style: normal;
  background-color: #FFFFFF;
  width: 60%;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #A8A8A8;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #A8A8A8;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
}

#sgruksazbm .gt_heading {
  background-color: #ebebeb;
  text-align: center;
  border-bottom-color: #FFFFFF;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

#sgruksazbm .gt_title {
  color: #323232;
  font-size: 125%;
  font-weight: initial;
  padding-top: 4px;
  padding-bottom: 4px;
  border-bottom-color: #FFFFFF;
  border-bottom-width: 0;
}

#sgruksazbm .gt_subtitle {
  color: #323232;
  font-size: 85%;
  font-weight: initial;
  padding-top: 0;
  padding-bottom: 4px;
  border-top-color: #FFFFFF;
  border-top-width: 0;
}

#sgruksazbm .gt_bottom_border {
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #989898;
}

#sgruksazbm .gt_col_headings {
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

#sgruksazbm .gt_col_heading {
  color: #323232;
  background-color: #ebebeb;
  font-size: 80%;
  font-weight: bolder;
  text-transform: uppercase;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 6px;
  padding-left: 5px;
  padding-right: 5px;
  overflow-x: hidden;
}

#sgruksazbm .gt_column_spanner_outer {
  color: #323232;
  background-color: #ebebeb;
  font-size: 80%;
  font-weight: bolder;
  text-transform: uppercase;
  padding-top: 0;
  padding-bottom: 0;
  padding-left: 4px;
  padding-right: 4px;
}

#sgruksazbm .gt_column_spanner_outer:first-child {
  padding-left: 0;
}

#sgruksazbm .gt_column_spanner_outer:last-child {
  padding-right: 0;
}

#sgruksazbm .gt_column_spanner {
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 6px;
  overflow-x: hidden;
  display: inline-block;
  width: 100%;
}

#sgruksazbm .gt_group_heading {
  padding: 8px;
  color: #323232;
  background-color: #FFEFDB80;
  font-size: 80%;
  font-weight: bolder;
  text-transform: uppercase;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #989898;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: middle;
}

#sgruksazbm .gt_empty_group_heading {
  padding: 0.5px;
  color: #323232;
  background-color: #FFEFDB80;
  font-size: 80%;
  font-weight: bolder;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #989898;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  vertical-align: middle;
}

#sgruksazbm .gt_from_md &gt; :first-child {
  margin-top: 0;
}

#sgruksazbm .gt_from_md &gt; :last-child {
  margin-bottom: 0;
}

#sgruksazbm .gt_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  margin: 10px;
  border-top-style: solid;
  border-top-width: 1px;
  border-top-color: #989898;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: middle;
  overflow-x: hidden;
}

#sgruksazbm .gt_stub {
  color: #323232;
  background-color: #ebebeb;
  font-size: 80%;
  font-weight: bolder;
  text-transform: uppercase;
  border-right-style: dashed;
  border-right-width: 1px;
  border-right-color: #989898;
  padding-left: 12px;
}

#sgruksazbm .gt_summary_row {
  color: #323232;
  background-color: #FFFFFF;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

#sgruksazbm .gt_first_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
}

#sgruksazbm .gt_grand_summary_row {
  color: #323232;
  background-color: #FFFFFF;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

#sgruksazbm .gt_first_grand_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-style: double;
  border-top-width: 6px;
  border-top-color: #D3D3D3;
}

#sgruksazbm .gt_striped {
  background-color: rgba(128, 128, 128, 0.05);
}

#sgruksazbm .gt_table_body {
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #989898;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
}

#sgruksazbm .gt_footnotes {
  color: #323232;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

#sgruksazbm .gt_footnote {
  margin: 0px;
  font-size: 90%;
  padding: 4px;
}

#sgruksazbm .gt_sourcenotes {
  color: #323232;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

#sgruksazbm .gt_sourcenote {
  font-size: 90%;
  padding: 4px;
}

#sgruksazbm .gt_left {
  text-align: left;
}

#sgruksazbm .gt_center {
  text-align: center;
}

#sgruksazbm .gt_right {
  text-align: right;
  font-variant-numeric: tabular-nums;
}

#sgruksazbm .gt_font_normal {
  font-weight: normal;
}

#sgruksazbm .gt_font_bold {
  font-weight: bold;
}

#sgruksazbm .gt_font_italic {
  font-style: italic;
}

#sgruksazbm .gt_super {
  font-size: 65%;
}

#sgruksazbm .gt_footnote_marks {
  font-style: italic;
  font-size: 65%;
}
&lt;/style&gt;
&lt;div id=&#34;sgruksazbm&#34; style=&#34;overflow-x:auto;overflow-y:auto;width:auto;height:auto;&#34;&gt;&lt;table class=&#34;gt_table&#34;&gt;
  &lt;thead class=&#34;gt_header&#34;&gt;
    &lt;tr&gt;
      &lt;th colspan=&#34;6&#34; class=&#34;gt_heading gt_title gt_font_normal&#34; style&gt;Overhyped Players on &lt;em&gt;Sleeper.App&lt;/em&gt;&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th colspan=&#34;6&#34; class=&#34;gt_heading gt_subtitle gt_font_normal gt_bottom_border&#34; style&gt;(Players that tend to go before their general ADP)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;thead class=&#34;gt_col_headings&#34;&gt;
    &lt;tr&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_left&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;&lt;/th&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_left&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;name&lt;/th&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;team&lt;/th&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;fp&lt;/th&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;sleeper&lt;/th&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;diff&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody class=&#34;gt_table_body&#34;&gt;
    &lt;tr class=&#34;gt_group_heading_row&#34;&gt;
      &lt;td colspan=&#34;6&#34; class=&#34;gt_group_heading&#34;&gt;WR&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_left gt_stub&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_left&#34;&gt;Deebo Samuel&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;SF&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;123&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;75&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34; style=&#34;background-color: rgba(183,28,28,0.8); color: #FFFFFF;&#34;&gt;-48&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_left gt_stub&#34;&gt;2&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_left&#34;&gt;Mecole Hardman&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;KC&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;147&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;100&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34; style=&#34;background-color: rgba(186,31,31,0.8); color: #FFFFFF;&#34;&gt;-47&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_left gt_stub&#34;&gt;4&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_left&#34;&gt;Emmanuel Sanders&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;NO&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;127&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;99&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34; style=&#34;background-color: rgba(242,75,67,0.8); color: #FFFFFF;&#34;&gt;-28&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_left gt_stub&#34;&gt;12&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_left&#34;&gt;Brandin Cooks&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;HOU&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;87&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;73&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34; style=&#34;background-color: rgba(250,187,190,0.8); color: #000000;&#34;&gt;-14&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_left gt_stub&#34;&gt;17&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_left&#34;&gt;T.Y. Hilton&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;IND&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;63&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;52&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34; style=&#34;background-color: rgba(255,215,219,0.8); color: #000000;&#34;&gt;-11&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_left gt_stub&#34;&gt;20&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_left&#34;&gt;D.K. Metcalf&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;SEA&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;53&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;44&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34; style=&#34;background-color: rgba(255,228,232,0.8); color: #000000;&#34;&gt;-9&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_left gt_stub&#34;&gt;21&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_left&#34;&gt;Marquise Brown&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;BAL&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;73&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;64&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34; style=&#34;background-color: rgba(255,228,232,0.8); color: #000000;&#34;&gt;-9&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr class=&#34;gt_group_heading_row&#34;&gt;
      &lt;td colspan=&#34;6&#34; class=&#34;gt_group_heading&#34;&gt;TE&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_left gt_stub&#34;&gt;3&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_left&#34;&gt;Rob Gronkowski&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;TB&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;107&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;72&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34; style=&#34;background-color: rgba(228,56,53,0.8); color: #FFFFFF;&#34;&gt;-35&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr class=&#34;gt_group_heading_row&#34;&gt;
      &lt;td colspan=&#34;6&#34; class=&#34;gt_group_heading&#34;&gt;RB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_left gt_stub&#34;&gt;5&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_left&#34;&gt;Marlon Mack&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;IND&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;91&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;69&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34; style=&#34;background-color: rgba(231,111,110,0.8); color: #000000;&#34;&gt;-22&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_left gt_stub&#34;&gt;6&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_left&#34;&gt;Alexander Mattison&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;MIN&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;113&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;96&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34; style=&#34;background-color: rgba(239,153,153,0.8); color: #000000;&#34;&gt;-17&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_left gt_stub&#34;&gt;8&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_left&#34;&gt;Sony Michel&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;NE&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;109&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;93&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34; style=&#34;background-color: rgba(243,164,165,0.8); color: #000000;&#34;&gt;-16&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_left gt_stub&#34;&gt;9&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_left&#34;&gt;David Montgomery&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;CHI&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;52&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;37&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34; style=&#34;background-color: rgba(246,176,177,0.8); color: #000000;&#34;&gt;-15&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_left gt_stub&#34;&gt;10&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_left&#34;&gt;Devin Singletary&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;BUF&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;57&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;42&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34; style=&#34;background-color: rgba(246,176,177,0.8); color: #000000;&#34;&gt;-15&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_left gt_stub&#34;&gt;11&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_left&#34;&gt;James Conner&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;PIT&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;39&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;25&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34; style=&#34;background-color: rgba(250,187,190,0.8); color: #000000;&#34;&gt;-14&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_left gt_stub&#34;&gt;13&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_left&#34;&gt;Le&#39;Veon Bell&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;NYJ&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;42&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;29&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34; style=&#34;background-color: rgba(253,199,203,0.8); color: #000000;&#34;&gt;-13&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_left gt_stub&#34;&gt;14&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_left&#34;&gt;J.K. Dobbins&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;BAL&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;89&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;76&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34; style=&#34;background-color: rgba(253,199,203,0.8); color: #000000;&#34;&gt;-13&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_left gt_stub&#34;&gt;16&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_left&#34;&gt;David Johnson&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;HOU&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;44&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;33&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34; style=&#34;background-color: rgba(255,215,219,0.8); color: #000000;&#34;&gt;-11&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_left gt_stub&#34;&gt;18&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_left&#34;&gt;Melvin Gordon&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;DEN&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;41&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;31&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34; style=&#34;background-color: rgba(255,222,225,0.8); color: #000000;&#34;&gt;-10&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_left gt_stub&#34;&gt;19&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_left&#34;&gt;Mark Ingram II&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;BAL&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;48&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;39&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34; style=&#34;background-color: rgba(255,228,232,0.8); color: #000000;&#34;&gt;-9&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_left gt_stub&#34;&gt;22&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_left&#34;&gt;Jonathan Taylor&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;IND&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;54&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;46&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34; style=&#34;background-color: rgba(255,235,238,0.8); color: #000000;&#34;&gt;-8&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr class=&#34;gt_group_heading_row&#34;&gt;
      &lt;td colspan=&#34;6&#34; class=&#34;gt_group_heading&#34;&gt;QB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_left gt_stub&#34;&gt;7&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_left&#34;&gt;Aaron Rodgers&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;GB&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;98&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;82&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34; style=&#34;background-color: rgba(243,164,165,0.8); color: #000000;&#34;&gt;-16&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_left gt_stub&#34;&gt;15&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_left&#34;&gt;Patrick Mahomes&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;KC&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;25&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;14&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34; style=&#34;background-color: rgba(255,215,219,0.8); color: #000000;&#34;&gt;-11&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
  
  
&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;Here’s our table for potential steals:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;steals %&amp;gt;% 
  filter(diff &amp;gt;= MINIMUM_DIFFERENCE) %&amp;gt;%
  table_init_with_options() %&amp;gt;% 
  tab_header(
    title = md(&amp;quot;Potential Steals on *Sleeper.App*&amp;quot;),
    subtitle = &amp;quot;(Players that tend to go after their general ADP)&amp;quot;
  ) %&amp;gt;% 
  data_color(
    columns = vars(diff),
    colors = scales::col_numeric(
      palette = paletteer::paletteer_d(
        palette = &amp;quot;ggsci::green_material&amp;quot;
      ) %&amp;gt;% as.character(),
      domain = NULL
    ),
    alpha = 0.8
  )&lt;/code&gt;&lt;/pre&gt;
&lt;style&gt;html {
  font-family: -apple-system, BlinkMacSystemFont, &#39;Segoe UI&#39;, Roboto, Oxygen, Ubuntu, Cantarell, &#39;Helvetica Neue&#39;, &#39;Fira Sans&#39;, &#39;Droid Sans&#39;, Arial, sans-serif;
}

#hhgzdoptpa .gt_table {
  display: table;
  border-collapse: collapse;
  margin-left: auto;
  margin-right: auto;
  color: #323232;
  font-size: 16px;
  font-weight: normal;
  font-style: normal;
  background-color: #FFFFFF;
  width: 60%;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #A8A8A8;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #A8A8A8;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
}

#hhgzdoptpa .gt_heading {
  background-color: #ebebeb;
  text-align: center;
  border-bottom-color: #FFFFFF;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

#hhgzdoptpa .gt_title {
  color: #323232;
  font-size: 125%;
  font-weight: initial;
  padding-top: 4px;
  padding-bottom: 4px;
  border-bottom-color: #FFFFFF;
  border-bottom-width: 0;
}

#hhgzdoptpa .gt_subtitle {
  color: #323232;
  font-size: 85%;
  font-weight: initial;
  padding-top: 0;
  padding-bottom: 4px;
  border-top-color: #FFFFFF;
  border-top-width: 0;
}

#hhgzdoptpa .gt_bottom_border {
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #989898;
}

#hhgzdoptpa .gt_col_headings {
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

#hhgzdoptpa .gt_col_heading {
  color: #323232;
  background-color: #ebebeb;
  font-size: 80%;
  font-weight: bolder;
  text-transform: uppercase;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 6px;
  padding-left: 5px;
  padding-right: 5px;
  overflow-x: hidden;
}

#hhgzdoptpa .gt_column_spanner_outer {
  color: #323232;
  background-color: #ebebeb;
  font-size: 80%;
  font-weight: bolder;
  text-transform: uppercase;
  padding-top: 0;
  padding-bottom: 0;
  padding-left: 4px;
  padding-right: 4px;
}

#hhgzdoptpa .gt_column_spanner_outer:first-child {
  padding-left: 0;
}

#hhgzdoptpa .gt_column_spanner_outer:last-child {
  padding-right: 0;
}

#hhgzdoptpa .gt_column_spanner {
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 6px;
  overflow-x: hidden;
  display: inline-block;
  width: 100%;
}

#hhgzdoptpa .gt_group_heading {
  padding: 8px;
  color: #323232;
  background-color: #FFEFDB80;
  font-size: 80%;
  font-weight: bolder;
  text-transform: uppercase;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #989898;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: middle;
}

#hhgzdoptpa .gt_empty_group_heading {
  padding: 0.5px;
  color: #323232;
  background-color: #FFEFDB80;
  font-size: 80%;
  font-weight: bolder;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #989898;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  vertical-align: middle;
}

#hhgzdoptpa .gt_from_md &gt; :first-child {
  margin-top: 0;
}

#hhgzdoptpa .gt_from_md &gt; :last-child {
  margin-bottom: 0;
}

#hhgzdoptpa .gt_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  margin: 10px;
  border-top-style: solid;
  border-top-width: 1px;
  border-top-color: #989898;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: middle;
  overflow-x: hidden;
}

#hhgzdoptpa .gt_stub {
  color: #323232;
  background-color: #ebebeb;
  font-size: 80%;
  font-weight: bolder;
  text-transform: uppercase;
  border-right-style: dashed;
  border-right-width: 1px;
  border-right-color: #989898;
  padding-left: 12px;
}

#hhgzdoptpa .gt_summary_row {
  color: #323232;
  background-color: #FFFFFF;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

#hhgzdoptpa .gt_first_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
}

#hhgzdoptpa .gt_grand_summary_row {
  color: #323232;
  background-color: #FFFFFF;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

#hhgzdoptpa .gt_first_grand_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-style: double;
  border-top-width: 6px;
  border-top-color: #D3D3D3;
}

#hhgzdoptpa .gt_striped {
  background-color: rgba(128, 128, 128, 0.05);
}

#hhgzdoptpa .gt_table_body {
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #989898;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
}

#hhgzdoptpa .gt_footnotes {
  color: #323232;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

#hhgzdoptpa .gt_footnote {
  margin: 0px;
  font-size: 90%;
  padding: 4px;
}

#hhgzdoptpa .gt_sourcenotes {
  color: #323232;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

#hhgzdoptpa .gt_sourcenote {
  font-size: 90%;
  padding: 4px;
}

#hhgzdoptpa .gt_left {
  text-align: left;
}

#hhgzdoptpa .gt_center {
  text-align: center;
}

#hhgzdoptpa .gt_right {
  text-align: right;
  font-variant-numeric: tabular-nums;
}

#hhgzdoptpa .gt_font_normal {
  font-weight: normal;
}

#hhgzdoptpa .gt_font_bold {
  font-weight: bold;
}

#hhgzdoptpa .gt_font_italic {
  font-style: italic;
}

#hhgzdoptpa .gt_super {
  font-size: 65%;
}

#hhgzdoptpa .gt_footnote_marks {
  font-style: italic;
  font-size: 65%;
}
&lt;/style&gt;
&lt;div id=&#34;hhgzdoptpa&#34; style=&#34;overflow-x:auto;overflow-y:auto;width:auto;height:auto;&#34;&gt;&lt;table class=&#34;gt_table&#34;&gt;
  &lt;thead class=&#34;gt_header&#34;&gt;
    &lt;tr&gt;
      &lt;th colspan=&#34;6&#34; class=&#34;gt_heading gt_title gt_font_normal&#34; style&gt;Potential Steals on &lt;em&gt;Sleeper.App&lt;/em&gt;&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th colspan=&#34;6&#34; class=&#34;gt_heading gt_subtitle gt_font_normal gt_bottom_border&#34; style&gt;(Players that tend to go after their general ADP)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;thead class=&#34;gt_col_headings&#34;&gt;
    &lt;tr&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_left&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;&lt;/th&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_left&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;name&lt;/th&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;team&lt;/th&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;fp&lt;/th&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;sleeper&lt;/th&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;diff&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody class=&#34;gt_table_body&#34;&gt;
    &lt;tr class=&#34;gt_group_heading_row&#34;&gt;
      &lt;td colspan=&#34;6&#34; class=&#34;gt_group_heading&#34;&gt;RB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_left gt_stub&#34;&gt;1&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_left&#34;&gt;Tarik Cohen&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;CHI&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;88&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;120&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34; style=&#34;background-color: rgba(27,94,32,0.8); color: #FFFFFF;&#34;&gt;32&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_left gt_stub&#34;&gt;18&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_left&#34;&gt;James White&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;NE&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;80&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;90&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34; style=&#34;background-color: rgba(208,234,209,0.8); color: #000000;&#34;&gt;10&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr class=&#34;gt_group_heading_row&#34;&gt;
      &lt;td colspan=&#34;6&#34; class=&#34;gt_group_heading&#34;&gt;TE&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_left gt_stub&#34;&gt;2&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_left&#34;&gt;Tyler Higbee&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;LAR&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;77&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;106&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34; style=&#34;background-color: rgba(47,127,51,0.8); color: #FFFFFF;&#34;&gt;29&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_left gt_stub&#34;&gt;3&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_left&#34;&gt;Austin Hooper&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;CLE&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;99&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;124&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34; style=&#34;background-color: rgba(63,153,67,0.8); color: #FFFFFF;&#34;&gt;25&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_left gt_stub&#34;&gt;19&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_left&#34;&gt;Hayden Hurst&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;ATL&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;97&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;107&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34; style=&#34;background-color: rgba(208,234,209,0.8); color: #000000;&#34;&gt;10&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_left gt_stub&#34;&gt;20&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_left&#34;&gt;Hunter Henry&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;LAC&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;78&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;87&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34; style=&#34;background-color: rgba(220,239,221,0.8); color: #000000;&#34;&gt;9&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr class=&#34;gt_group_heading_row&#34;&gt;
      &lt;td colspan=&#34;6&#34; class=&#34;gt_group_heading&#34;&gt;QB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_left gt_stub&#34;&gt;4&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_left&#34;&gt;Josh Allen&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;BUF&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;70&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;89&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34; style=&#34;background-color: rgba(99,186,103,0.8); color: #000000;&#34;&gt;19&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_left gt_stub&#34;&gt;5&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_left&#34;&gt;Matthew Stafford&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;DET&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;90&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;109&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34; style=&#34;background-color: rgba(99,186,103,0.8); color: #000000;&#34;&gt;19&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_left gt_stub&#34;&gt;12&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_left&#34;&gt;Carson Wentz&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;PHI&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;83&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;98&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34; style=&#34;background-color: rgba(143,205,145,0.8); color: #000000;&#34;&gt;15&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_left gt_stub&#34;&gt;22&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_left&#34;&gt;Matt Ryan&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;ATL&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;75&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;83&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34; style=&#34;background-color: rgba(232,245,233,0.8); color: #000000;&#34;&gt;8&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr class=&#34;gt_group_heading_row&#34;&gt;
      &lt;td colspan=&#34;6&#34; class=&#34;gt_group_heading&#34;&gt;WR&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_left gt_stub&#34;&gt;6&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_left&#34;&gt;D.J. Moore&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;CAR&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;30&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;47&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34; style=&#34;background-color: rgba(119,195,122,0.8); color: #000000;&#34;&gt;17&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_left gt_stub&#34;&gt;7&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_left&#34;&gt;Odell Beckham Jr.&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;CLE&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;31&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;48&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34; style=&#34;background-color: rgba(119,195,122,0.8); color: #000000;&#34;&gt;17&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_left gt_stub&#34;&gt;8&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_left&#34;&gt;Courtland Sutton&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;DEN&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;50&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;67&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34; style=&#34;background-color: rgba(119,195,122,0.8); color: #000000;&#34;&gt;17&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_left gt_stub&#34;&gt;9&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_left&#34;&gt;Allen Robinson&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;CHI&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;24&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;40&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34; style=&#34;background-color: rgba(129,199,132,0.8); color: #000000;&#34;&gt;16&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_left gt_stub&#34;&gt;10&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_left&#34;&gt;DeVante Parker&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;MIA&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;55&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;71&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34; style=&#34;background-color: rgba(129,199,132,0.8); color: #000000;&#34;&gt;16&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_left gt_stub&#34;&gt;11&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_left&#34;&gt;JuJu Smith-Schuster&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;PIT&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;28&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;43&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34; style=&#34;background-color: rgba(143,205,145,0.8); color: #000000;&#34;&gt;15&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_left gt_stub&#34;&gt;13&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_left&#34;&gt;Jarvis Landry&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;CLE&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;67&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;81&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34; style=&#34;background-color: rgba(156,210,158,0.8); color: #000000;&#34;&gt;14&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_left gt_stub&#34;&gt;14&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_left&#34;&gt;Robert Woods&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;LAR&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;36&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;49&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34; style=&#34;background-color: rgba(169,216,171,0.8); color: #000000;&#34;&gt;13&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_left gt_stub&#34;&gt;15&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_left&#34;&gt;Tyler Boyd&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;CIN&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;72&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;85&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34; style=&#34;background-color: rgba(169,216,171,0.8); color: #000000;&#34;&gt;13&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_left gt_stub&#34;&gt;16&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_left&#34;&gt;Marvin Jones&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;DET&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;81&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;94&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34; style=&#34;background-color: rgba(169,216,171,0.8); color: #000000;&#34;&gt;13&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_left gt_stub&#34;&gt;17&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_left&#34;&gt;Terry McLaurin&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;WAS&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;49&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;59&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34; style=&#34;background-color: rgba(208,234,209,0.8); color: #000000;&#34;&gt;10&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_left gt_stub&#34;&gt;21&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_left&#34;&gt;D.J. Chark&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;JAX&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;47&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34;&gt;55&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center&#34; style=&#34;background-color: rgba(232,245,233,0.8); color: #000000;&#34;&gt;8&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
  
  
&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;conclusion&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;These tables might help, when drafting on Sleeper this year. You should, however, &lt;strong&gt;never&lt;/strong&gt; base your whole draft around this. If you like a player and find him on the &lt;em&gt;Steals&lt;/em&gt;-Table, great! You might even get him a round later than usual. If you like a player, but he is on the &lt;em&gt;Overhyped&lt;/em&gt;-Table, you have to decide, if you really want him, because you might have to pay a hefty price.&lt;/p&gt;
&lt;p&gt;Standalone Overhyped Table can be found &lt;a href=&#34;https://maxhuebner.github.io/post/data/hyped.html&#34;&gt;here&lt;/a&gt;&lt;br /&gt;
Standalone Steal table can be found &lt;a href=&#34;https://maxhuebner.github.io/post/data/steals.html&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Scraping Rankings from Sleeper with Selenium</title>
      <link>/post/scraping-rankings-from-sleeper-with-selenium/</link>
      <pubDate>Tue, 18 Aug 2020 00:00:00 +0000</pubDate>
      <guid>/post/scraping-rankings-from-sleeper-with-selenium/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;This Post will show you how to scrape the in-draft rankings from &lt;a href=&#34;https://sleeper.app&#34;&gt;sleeper.app&lt;/a&gt; using Python and &lt;em&gt;Selenium&lt;/em&gt;.&lt;/p&gt;
&lt;div id=&#34;prerequisites&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Prerequisites&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://sleeper.app&#34;&gt;sleeper.app&lt;/a&gt;-Account&lt;/li&gt;
&lt;li&gt;At least one open mock draft in this account&lt;/li&gt;
&lt;li&gt;Downloaded &lt;em&gt;chromedriver.exe&lt;/em&gt; from &lt;a href=&#34;https://chromedriver.chromium.org/downloads&#34;&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Installed Packages Selenium and Pandas&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;approach&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Approach&lt;/h3&gt;
&lt;p&gt;We will need the following imports:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.chrome.options import Options

import pandas as pd
import time
from datetime import date&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next we will need to setup the script. If you want to run it headless you can by uncommenting these lines, I find it, however, interesting to look at the window move.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;USERNAME = &amp;quot;INSERT USERNAME HERE&amp;quot;  # Sleeper.app Username
PASSWORD = &amp;quot;INSERT PASSWORD HERE&amp;quot;  # Sleeper.app Password

chrome_options = Options()
# If you uncomment these line the browser will run headless meaning
# it wont open a browser window for you to look at
# chrome_options.add_argument(&amp;quot;--headless&amp;quot;)
# chrome_options.add_argument(&amp;quot;--disable-gpu&amp;quot;)

# My chromedriver.exe is in the project path. Update accordingly
driver = webdriver.Chrome(executable_path =  &amp;#39;./driver/chromedriver.exe&amp;#39;, options=chrome_options)
driver.get(&amp;quot;https://sleeper.app/login&amp;quot;)  # Get to the Login Page&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After this code has ran, the controlled Chromebrowser will show a login page. We need to log into our account.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;# Find Username field using XPath - Fill in Username
driver.find_element_by_xpath(&amp;quot;//input&amp;quot;).send_keys(USERNAME)

# Find Login Button - Clock
loginButton = driver.find_element_by_xpath(&amp;#39;//*[contains(concat( &amp;quot; &amp;quot;, @class, &amp;quot; &amp;quot; ), concat( &amp;quot; &amp;quot;, &amp;quot;login-button&amp;quot;, &amp;quot; &amp;quot; ))]&amp;#39;)
loginButton.click()

time.sleep(2)

# After First Click Password Field Will Show Up - Enter Password and click again
driver.find_elements_by_xpath(&amp;#39;//input&amp;#39;)[1].send_keys(PASSWORD)
loginButton.click()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We are now logged in. The next step would be to navigate to our previously created mock draft and have a look at its rankings.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;# LOGGED IN NOW - Waiting just to make sure
time.sleep(10)

# Click Mock Draft Page - Click on first Mock Draft Found
# HINT: You NEED to create this mock draft by hand before
driver.find_element_by_xpath(&amp;#39;//*[contains(concat( &amp;quot; &amp;quot;, @class, &amp;quot; &amp;quot; ), concat( &amp;quot; &amp;quot;, &amp;quot;nav-draftboard-item&amp;quot;, &amp;quot; &amp;quot; ))]//*[contains(concat( &amp;quot; &amp;quot;, @class, &amp;quot; &amp;quot; ), concat( &amp;quot; &amp;quot;, &amp;quot;title&amp;quot;, &amp;quot; &amp;quot; ))]&amp;#39;).click()
time.sleep(5)
driver.find_element_by_class_name(&amp;quot;draft-list-item&amp;quot;).click()
time.sleep(2)

# Switch To New Mock Draft Tab
# Although it looks like it, the active window is not yet the mock draft
driver.switch_to.window(driver.window_handles[1])&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We are now in a draft lobby and can see the rankings. Let’s scrape them:&lt;br /&gt;
(The Python comments should explain pretty well what the code is doing)&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;# Init Data Loading Web Driver
wait = WebDriverWait(driver,15)

scraped_elements = set()  # Contains ID&amp;#39;s of already scraped names
execute_loop = True
rows_list = []  # Contains Dicts - Row of our DataFrame
rank = 1  # Counter for Rank
while execute_loop:
    # Get Visible Entries
    names = wait.until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, &amp;#39;.name-wrapper&amp;#39;)))
    for name in names:
        if name.id in scraped_elements:  # Already Scraped
            continue

        # New Player
        scraped_elements.add(name.id)
        data_extract = name.text.split(&amp;#39;\n&amp;#39;)

        if len(data_extract) &amp;lt; 3:  # Not Fully Loaded -&amp;gt; Remove Again
            scraped_elements.remove(name.id)
            break

        rows_list.append({
            &amp;quot;rank&amp;quot;: rank,
            &amp;quot;name&amp;quot;: data_extract[0],
            &amp;quot;pos&amp;quot;: data_extract[1],
            &amp;quot;team&amp;quot;: data_extract[2]
        })

        print(f&amp;quot;{rank} - {data_extract[0]}&amp;quot;)

        rank += 1

        if len(rows_list) &amp;gt;= 300:  # Only Scrape First 300 Players
            print(&amp;quot;ABORTING..&amp;quot;)
            execute_loop = False

    # Scroll Down
    # .odd is every other row
    # (You could probably scroll down more/faster)
    ActionChains(driver).move_to_element(driver.find_elements_by_css_selector(&amp;quot;.odd&amp;quot;)[5]).perform()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We have successfully scraped the top 300 player list on Sleeper! We need to save the data in a last step:&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;# Write CSV
df = pd.DataFrame(data=rows_list)
print(df)
df.to_csv(f&amp;quot;data/sleeper-mock-ranks-{date.today()}.csv&amp;quot;, index=False)
driver.quit()  # Quit&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After that we have a &lt;em&gt;.csv&lt;/em&gt; with our scraped players.&lt;/p&gt;
&lt;p&gt;If you want to download the script, click &lt;a href=&#34;https://maxhuebner.github.io/post/data/sleeper_extract_mock_data.py&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you don’t want to run the script yourself click &lt;a href=&#34;https://maxhuebner.github.io/post/data/sleeper-mock-ranks-2020-08-18.csv&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Visualizing the Best Fantasy Football Performances of the 2019 Season</title>
      <link>/post/visualizing-the-best-fantasy-football-performances-of-the-2019-season/</link>
      <pubDate>Tue, 18 Aug 2020 00:00:00 +0000</pubDate>
      <guid>/post/visualizing-the-best-fantasy-football-performances-of-the-2019-season/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;With the Fantasy Football season only a few weeks away, I decided to look back at the 2019 season and the greatest weekly performances.&lt;br /&gt;
In this post I will try to visualize the best weekly performances as well as the performance of the best players over the whole season.&lt;/p&gt;
&lt;div id=&#34;setup&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Setup&lt;/h2&gt;
&lt;p&gt;First, we need data. Since I didn’t have fantasy specific data I thought the easiest way to do this is to calculate the fantasy points from the Play-By-Play Data.&lt;br /&gt;
You can find this and many more great datasets &lt;a href=&#34;https://github.com/guga31bb/nflfastR-data&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pbp &amp;lt;- readRDS(url(&amp;quot;https://raw.githubusercontent.com/guga31bb/nflfastR-data/master/data/play_by_play_2019.rds&amp;quot;))

pbp &amp;lt;- pbp %&amp;gt;%
  filter(
    season_type == &amp;quot;REG&amp;quot;,
    between(week, 1, 16)
  )
pbp&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 43,240 x 333
##    play_id game_id old_game_id home_team away_team season_type  week posteam
##      &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;       &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;       &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;  
##  1       1 2019_0~ 2019090804  MIN       ATL       REG             1 &amp;lt;NA&amp;gt;   
##  2      36 2019_0~ 2019090804  MIN       ATL       REG             1 ATL    
##  3      51 2019_0~ 2019090804  MIN       ATL       REG             1 ATL    
##  4      79 2019_0~ 2019090804  MIN       ATL       REG             1 ATL    
##  5     100 2019_0~ 2019090804  MIN       ATL       REG             1 ATL    
##  6     121 2019_0~ 2019090804  MIN       ATL       REG             1 ATL    
##  7     148 2019_0~ 2019090804  MIN       ATL       REG             1 MIN    
##  8     185 2019_0~ 2019090804  MIN       ATL       REG             1 MIN    
##  9     214 2019_0~ 2019090804  MIN       ATL       REG             1 MIN    
## 10     239 2019_0~ 2019090804  MIN       ATL       REG             1 MIN    
## # ... with 43,230 more rows, and 325 more variables: posteam_type &amp;lt;chr&amp;gt;,
## #   defteam &amp;lt;chr&amp;gt;, side_of_field &amp;lt;chr&amp;gt;, yardline_100 &amp;lt;dbl&amp;gt;, game_date &amp;lt;chr&amp;gt;,
## #   quarter_seconds_remaining &amp;lt;dbl&amp;gt;, half_seconds_remaining &amp;lt;dbl&amp;gt;,
## #   game_seconds_remaining &amp;lt;dbl&amp;gt;, game_half &amp;lt;chr&amp;gt;, quarter_end &amp;lt;dbl&amp;gt;,
## #   drive &amp;lt;dbl&amp;gt;, sp &amp;lt;dbl&amp;gt;, qtr &amp;lt;dbl&amp;gt;, down &amp;lt;dbl&amp;gt;, goal_to_go &amp;lt;dbl&amp;gt;, time &amp;lt;chr&amp;gt;,
## #   yrdln &amp;lt;chr&amp;gt;, ydstogo &amp;lt;dbl&amp;gt;, ydsnet &amp;lt;dbl&amp;gt;, desc &amp;lt;chr&amp;gt;, play_type &amp;lt;chr&amp;gt;,
## #   yards_gained &amp;lt;dbl&amp;gt;, shotgun &amp;lt;dbl&amp;gt;, no_huddle &amp;lt;dbl&amp;gt;, qb_dropback &amp;lt;dbl&amp;gt;,
## #   qb_kneel &amp;lt;dbl&amp;gt;, qb_spike &amp;lt;dbl&amp;gt;, qb_scramble &amp;lt;dbl&amp;gt;, pass_length &amp;lt;chr&amp;gt;,
## #   pass_location &amp;lt;chr&amp;gt;, air_yards &amp;lt;dbl&amp;gt;, yards_after_catch &amp;lt;dbl&amp;gt;,
## #   run_location &amp;lt;chr&amp;gt;, run_gap &amp;lt;chr&amp;gt;, field_goal_result &amp;lt;chr&amp;gt;,
## #   kick_distance &amp;lt;dbl&amp;gt;, extra_point_result &amp;lt;chr&amp;gt;, two_point_conv_result &amp;lt;chr&amp;gt;,
## #   home_timeouts_remaining &amp;lt;dbl&amp;gt;, away_timeouts_remaining &amp;lt;dbl&amp;gt;,
## #   timeout &amp;lt;dbl&amp;gt;, timeout_team &amp;lt;chr&amp;gt;, td_team &amp;lt;chr&amp;gt;,
## #   posteam_timeouts_remaining &amp;lt;dbl&amp;gt;, defteam_timeouts_remaining &amp;lt;dbl&amp;gt;,
## #   total_home_score &amp;lt;dbl&amp;gt;, total_away_score &amp;lt;dbl&amp;gt;, posteam_score &amp;lt;dbl&amp;gt;,
## #   defteam_score &amp;lt;dbl&amp;gt;, score_differential &amp;lt;dbl&amp;gt;, posteam_score_post &amp;lt;dbl&amp;gt;,
## #   defteam_score_post &amp;lt;dbl&amp;gt;, score_differential_post &amp;lt;dbl&amp;gt;,
## #   no_score_prob &amp;lt;dbl&amp;gt;, opp_fg_prob &amp;lt;dbl&amp;gt;, opp_safety_prob &amp;lt;dbl&amp;gt;,
## #   opp_td_prob &amp;lt;dbl&amp;gt;, fg_prob &amp;lt;dbl&amp;gt;, safety_prob &amp;lt;dbl&amp;gt;, td_prob &amp;lt;dbl&amp;gt;,
## #   extra_point_prob &amp;lt;dbl&amp;gt;, two_point_conversion_prob &amp;lt;dbl&amp;gt;, ep &amp;lt;dbl&amp;gt;,
## #   epa &amp;lt;dbl&amp;gt;, total_home_epa &amp;lt;dbl&amp;gt;, total_away_epa &amp;lt;dbl&amp;gt;,
## #   total_home_rush_epa &amp;lt;dbl&amp;gt;, total_away_rush_epa &amp;lt;dbl&amp;gt;,
## #   total_home_pass_epa &amp;lt;dbl&amp;gt;, total_away_pass_epa &amp;lt;dbl&amp;gt;, air_epa &amp;lt;dbl&amp;gt;,
## #   yac_epa &amp;lt;dbl&amp;gt;, comp_air_epa &amp;lt;dbl&amp;gt;, comp_yac_epa &amp;lt;dbl&amp;gt;,
## #   total_home_comp_air_epa &amp;lt;dbl&amp;gt;, total_away_comp_air_epa &amp;lt;dbl&amp;gt;,
## #   total_home_comp_yac_epa &amp;lt;dbl&amp;gt;, total_away_comp_yac_epa &amp;lt;dbl&amp;gt;,
## #   total_home_raw_air_epa &amp;lt;dbl&amp;gt;, total_away_raw_air_epa &amp;lt;dbl&amp;gt;,
## #   total_home_raw_yac_epa &amp;lt;dbl&amp;gt;, total_away_raw_yac_epa &amp;lt;dbl&amp;gt;, wp &amp;lt;dbl&amp;gt;,
## #   def_wp &amp;lt;dbl&amp;gt;, home_wp &amp;lt;dbl&amp;gt;, away_wp &amp;lt;dbl&amp;gt;, wpa &amp;lt;dbl&amp;gt;, home_wp_post &amp;lt;dbl&amp;gt;,
## #   away_wp_post &amp;lt;dbl&amp;gt;, vegas_wp &amp;lt;dbl&amp;gt;, vegas_home_wp &amp;lt;dbl&amp;gt;,
## #   total_home_rush_wpa &amp;lt;dbl&amp;gt;, total_away_rush_wpa &amp;lt;dbl&amp;gt;,
## #   total_home_pass_wpa &amp;lt;dbl&amp;gt;, total_away_pass_wpa &amp;lt;dbl&amp;gt;, air_wpa &amp;lt;dbl&amp;gt;,
## #   yac_wpa &amp;lt;dbl&amp;gt;, comp_air_wpa &amp;lt;dbl&amp;gt;, comp_yac_wpa &amp;lt;dbl&amp;gt;,
## #   total_home_comp_air_wpa &amp;lt;dbl&amp;gt;, ...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We now have every play of the 2019 NFL season! The dataset is missing fantasy points, so we need to calculate them for the game we are interested in. Since we will reuse this calculation a lot, it’s best to write a function. I will call it &lt;em&gt;calc_ff&lt;/em&gt;:&lt;br /&gt;
You can use &lt;code&gt;. %&amp;gt;%&lt;/code&gt; to create a anonymous function. The function calculates the time, that has progressed since the start of a game in seconds, in order to sort it by this variable. This is necessary because we will use &lt;code&gt;accumulate()&lt;/code&gt; to sum up the plays shortly.&lt;br /&gt;
After that we will calculate the points. Every yards gained equals a tenth of a point, touchdowns give 6 points, if you fumble you will lose 2 points. This calculation is for the &lt;em&gt;.5PPR&lt;/em&gt; format, so each reception will give you half a point. You get 2 points for a successful Two-Point-Conversion.&lt;br /&gt;
After that, we accumulate the independent plays in order to get the total fantasy points up to that point.&lt;br /&gt;
Lastly, I used the relatively new but awesome function &lt;code&gt;relocate()&lt;/code&gt; to display the points in front. We will also create a function to calculate for the whole season.&lt;br /&gt;
&lt;em&gt;(Note: This calculation will only work for skill positions, if you would like to analyze Quaterbacks you have to change the function a bit)&lt;/em&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;calc_ff &amp;lt;- . %&amp;gt;%
  arrange(desc(game_seconds_remaining)) %&amp;gt;%
  mutate(time_in_sec = 3600 - game_seconds_remaining) %&amp;gt;%
  mutate(
    ff_points = yards_gained / 10,
    ff_points = ifelse(touchdown, ff_points + 6, ff_points),
    ff_points = ifelse(fumble_lost, ff_points - 2, ff_points),
    ff_points = ifelse(play_type == &amp;quot;pass&amp;quot; &amp;amp; complete_pass, ff_points + .5, ff_points),
    ff_points = ifelse(two_point_attempt &amp;amp; two_point_conv_result == &amp;quot;success&amp;quot;, 2, ff_points),
    ff_points_sum = accumulate(ff_points, sum),
    ff_points_total = last(ff_points_sum)
  ) %&amp;gt;%
  relocate(contains(&amp;quot;ff_points&amp;quot;), .before = play_id)

calc_ff_season &amp;lt;- . %&amp;gt;%
  group_by(game_date) %&amp;gt;%
  calc_ff() %&amp;gt;%
  ungroup()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Visualization for NFl related things is a perfect opportunity to try out the package &lt;em&gt;teamcolors&lt;/em&gt;.&lt;br /&gt;
There is a little bit of setup required to get it to work with our data&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(teamcolors)

# Unfortunately Play-By-Play Data uses Abbreviations while Teamcolors uses full names
team_abbr &amp;lt;- tribble(
  ~name, ~team_code,
  &amp;quot;Arizona Cardinals&amp;quot;, &amp;quot;ARI&amp;quot;,
  &amp;quot;Atlanta Falcons&amp;quot;, &amp;quot;ATL&amp;quot;,
  &amp;quot;Baltimore Ravens&amp;quot;, &amp;quot;BAL&amp;quot;,
  &amp;quot;Buffalo Bills&amp;quot;, &amp;quot;BUF&amp;quot;,
  &amp;quot;Carolina Panthers&amp;quot;, &amp;quot;CAR&amp;quot;,
  &amp;quot;Chicago Bears&amp;quot;, &amp;quot;CHI&amp;quot;,
  &amp;quot;Cincinnati Bengals&amp;quot;, &amp;quot;CIN&amp;quot;,
  &amp;quot;Cleveland Browns&amp;quot;, &amp;quot;CLE&amp;quot;,
  &amp;quot;Dallas Cowboys&amp;quot;, &amp;quot;DAL&amp;quot;,
  &amp;quot;Denver Broncos&amp;quot;, &amp;quot;DEN&amp;quot;,
  &amp;quot;Detroit Lions&amp;quot;, &amp;quot;DET&amp;quot;,
  &amp;quot;Green Bay Packers&amp;quot;, &amp;quot;GB&amp;quot;,
  &amp;quot;Houston Texans&amp;quot;, &amp;quot;HOU&amp;quot;,
  &amp;quot;Indianapolis Colts&amp;quot;, &amp;quot;IND&amp;quot;,
  &amp;quot;Jacksonville Jaguars&amp;quot;, &amp;quot;JAX&amp;quot;,
  &amp;quot;Kansas City Chiefs&amp;quot;, &amp;quot;KC&amp;quot;,
  &amp;quot;Los Angeles Chargers&amp;quot;, &amp;quot;LAC&amp;quot;,
  &amp;quot;Los Angeles Rams&amp;quot;, &amp;quot;LA&amp;quot;,
  &amp;quot;Miami Dolphins&amp;quot;, &amp;quot;MIA&amp;quot;,
  &amp;quot;Minnesota Vikings&amp;quot;, &amp;quot;MIN&amp;quot;,
  &amp;quot;New England Patriots&amp;quot;, &amp;quot;NE&amp;quot;,
  &amp;quot;New Orleans Saints&amp;quot;, &amp;quot;NO&amp;quot;,
  &amp;quot;New York Giants&amp;quot;, &amp;quot;NYG&amp;quot;,
  &amp;quot;New York Jets&amp;quot;, &amp;quot;NYJ&amp;quot;,
  &amp;quot;Oakland Raiders&amp;quot;, &amp;quot;LV&amp;quot;,
  &amp;quot;Philadelphia Eagles&amp;quot;, &amp;quot;PHI&amp;quot;,
  &amp;quot;Pittsburgh Steelers&amp;quot;, &amp;quot;PIT&amp;quot;,
  &amp;quot;San Francisco 49ers&amp;quot;, &amp;quot;SF&amp;quot;,
  &amp;quot;Seattle Seahawks&amp;quot;, &amp;quot;SEA&amp;quot;,
  &amp;quot;Tampa Bay Buccaneers&amp;quot;, &amp;quot;TB&amp;quot;,
  &amp;quot;Tennessee Titans&amp;quot;, &amp;quot;TEN&amp;quot;,
  &amp;quot;Washington Redskins&amp;quot;, &amp;quot;WAS&amp;quot;
)

teamcols &amp;lt;- filter(teamcolors, league == &amp;quot;nfl&amp;quot;) %&amp;gt;%
  left_join(team_abbr, by = &amp;quot;name&amp;quot;) %&amp;gt;%
  select(team_code, name, primary, secondary, logo)

teamcols&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 32 x 5
##    team_code name        primary secondary logo                                 
##    &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;       &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;                                
##  1 ARI       Arizona Ca~ #97233f #000000   http://content.sportslogos.net/logos~
##  2 ATL       Atlanta Fa~ #a71930 #000000   http://content.sportslogos.net/logos~
##  3 BAL       Baltimore ~ #241773 #000000   http://content.sportslogos.net/logos~
##  4 BUF       Buffalo Bi~ #00338d #c60c30   http://content.sportslogos.net/logos~
##  5 CAR       Carolina P~ #0085ca #000000   http://content.sportslogos.net/logos~
##  6 CHI       Chicago Be~ #0b162a #c83803   http://content.sportslogos.net/logos~
##  7 CIN       Cincinnati~ #000000 #fb4f14   http://content.sportslogos.net/logos~
##  8 CLE       Cleveland ~ #fb4f14 #22150c   http://content.sportslogos.net/logos~
##  9 DAL       Dallas Cow~ #002244 #b0b7bc   http://content.sportslogos.net/logos~
## 10 DEN       Denver Bro~ #002244 #fb4f14   http://content.sportslogos.net/logos~
## # ... with 22 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that we have the team abbreviations we can join with our dataset:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pbp &amp;lt;- pbp %&amp;gt;% left_join(teamcols, by = c(&amp;quot;posteam&amp;quot; = &amp;quot;team_code&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We are finally ready to do some visualization.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;visualization-of-weekly-perfomances&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Visualization of weekly perfomances&lt;/h2&gt;
&lt;p&gt;As discussed earlier in this post, we will reuse the same plot a few times, so we should just write a function for it. We want to plot the performance of a player for a given week so those will be our arguments along with a plot title.&lt;br /&gt;
I also would like to make the graph interactive, using the &lt;em&gt;plotly&lt;/em&gt; package.&lt;br /&gt;
First we filter out only the plays for our player (using his id) and the given week. The dataset now only contains plays from the specified week, where the player was involved as a receiver or runner, so on this data we can run our function to calculate his fantasy points.&lt;br /&gt;
&lt;code&gt;text_disp&lt;/code&gt; will contain the text, that we want to display if you hover over an event. Events are either a Touchdown, which we will display as a red dot or a fumble, which will be a black dot.&lt;br /&gt;
The Line, that shows the Fantasy Points over Game Time will be colored in the primary color of the players team.&lt;br /&gt;
Each quater will be seperated by a dashed &lt;em&gt;vline&lt;/em&gt;. The rest of the code is necessary so that plotly won’t display labels for the time axis.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Edit&lt;/strong&gt;: Unfortunately Plotly does not seem to work in this environment, Plotly Plot will display, but in completely wrong dimensions. Therefore I will comment out the Plotly Part. The Rest won’t be changed so you could just run &lt;code&gt;ggplotly(p, tooltip = &#34;text&#34;)&lt;/code&gt; on your plot.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# library(plotly)

plot_week_performance &amp;lt;- function(player_id, week_nr, plot_title) {
  p &amp;lt;- pbp %&amp;gt;%
    filter(
      receiver_player_id == player_id | rusher_player_id == player_id,
      week == week_nr
    ) %&amp;gt;%
    calc_ff() %&amp;gt;%
    arrange(time_in_sec) %&amp;gt;%
    mutate(text_disp = glue::glue(&amp;quot;Quater: {qtr}\nDrive: {drive}\nTime: {time}\n\nScore\n{away_team}: {total_away_score}\n{home_team}: {total_home_score}\n&amp;quot;)) %&amp;gt;%
    ggplot(aes(time_in_sec, ff_points_sum, color = primary)) +
    geom_line(size = 1) +
    geom_point(
      shape = 19, color = &amp;quot;red&amp;quot;, size = 2, data = . %&amp;gt;% filter(touchdown == T),
      aes(time_in_sec, ff_points_sum, text = text_disp)
    ) +
    geom_point(
      shape = 19, color = &amp;quot;black&amp;quot;, size = 2, data = . %&amp;gt;% filter(fumble == T),
      aes(time_in_sec, ff_points_sum, text = text_disp)
    ) +
    geom_vline(xintercept = c(900, 1800, 2700), alpha = .5, lty = 2) +
    expand_limits(x = c(0, 3600)) +
    scale_x_continuous(labels = NULL, breaks = NULL) +
    scale_color_identity() +
    theme_hubnr_thin() +
    labs(
      title = plot_title,
      x = &amp;quot;Time&amp;quot;,
      y = &amp;quot;Fantasy Points&amp;quot;
    ) +
    theme(
      legend.position = &amp;quot;none&amp;quot;,
      axis.ticks.x = element_blank(),
      axis.text.x = element_blank()
    )

  # ggplotly(p, tooltip = &amp;quot;text&amp;quot;)
  p
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that we have our plot generating function, we should test it on some of the best fantasy performances of the last season.&lt;br /&gt;
In order to get results you need a player_id, which you can get by filtering the dataset for the specific player (Hint: Kenyan Drake would be ‘K.Drake’). I will omit this step for this post.&lt;/p&gt;
&lt;div id=&#34;kenyan-drake---week-15-and-16&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Kenyan Drake - Week 15 (and 16)&lt;/h3&gt;
&lt;p&gt;Let’s start with Kenyan Drake. After a disappointing first half of the season on the Miami Dolphins, Drake got traded to the Arizona Cardinals, where he became fantasy gold immediatly. Especially his performances in the Fantasy Football playoffs made Kenyan Drake a &lt;em&gt;League Winner&lt;/em&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot_week_performance(
  &amp;quot;32013030-2d30-3033-3331-31385a388006&amp;quot;, 15,
  &amp;quot;Kenyan Drake - Week 15&amp;quot;
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-08-18-visualizing-the-best-fantasy-football-performances-of-the-2019-season.en_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;2400&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot_week_performance(
  &amp;quot;32013030-2d30-3033-3331-31385a388006&amp;quot;, 16,
  &amp;quot;Kenyan Drake - Week 16&amp;quot;
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-08-18-visualizing-the-best-fantasy-football-performances-of-the-2019-season.en_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;2400&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;christian-mccaffrey---week-1&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Christian McCaffrey - Week 1&lt;/h3&gt;
&lt;p&gt;McCaffrey was awesome the whole season long (execpt week 2). He started the season off with an incredible performance, racking up 42.9 fantasy points. The insane thing about McCaffreys season is, that this wasn’t even his best fantasy performance (47.7 pts - Week 5 vs. Jax).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot_week_performance(
  &amp;quot;32013030-2d30-3033-3332-3830ec2c3be7&amp;quot;, 1,
  &amp;quot;Christian McCaffreye - Week 1&amp;quot;
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-08-18-visualizing-the-best-fantasy-football-performances-of-the-2019-season.en_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;2400&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;aaron-jones---week-5&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Aaron Jones - Week 5&lt;/h3&gt;
&lt;p&gt;Aaron Jones performance in Week 5 was spectacular. He was the running back, that scored the most points in a single game this season.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot_week_performance(
  &amp;quot;32013030-2d30-3033-3332-3933ed82c0de&amp;quot;, 5,
  &amp;quot;Aaron Jones - Week 5&amp;quot;
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-08-18-visualizing-the-best-fantasy-football-performances-of-the-2019-season.en_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;2400&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;sammy-watkins---week-1&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Sammy Watkins - Week 1&lt;/h3&gt;
&lt;p&gt;Similar to McCaffrey, Sammy Watkins hat an unbelivable first week, scoring 46.8 points! Unfortuantely, unlike McCaffrey, he could not reproduce a similar performance again. In fact, Watkins Week 1 performance contributed more than a quater of his total points this season.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot_week_performance(
  &amp;quot;32013030-2d30-3033-3133-32353107e672&amp;quot;, 1,
  &amp;quot;Sammy Watkins - Week 1&amp;quot;
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-08-18-visualizing-the-best-fantasy-football-performances-of-the-2019-season.en_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;2400&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;will-fuller---week-5&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Will Fuller - Week 5&lt;/h3&gt;
&lt;p&gt;Similar to Watkins, Fuller also had one week, that outshined the rest of his season by a mile. He scored the most fantasy points in a game for a Wide Receiver this Year (53.7)&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot_week_performance(
  &amp;quot;32013030-2d30-3033-3331-3237332aee05&amp;quot;, 5,
  &amp;quot;Will Fuller - Week 5&amp;quot;
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-08-18-visualizing-the-best-fantasy-football-performances-of-the-2019-season.en_files/figure-html/unnamed-chunk-10-1.png&#34; width=&#34;2400&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;visualization-of-season-perfomance&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Visualization of season perfomance&lt;/h2&gt;
&lt;p&gt;Now that we looked at individual games, let’s have a look at the whole season of a player.&lt;br /&gt;
To do that we need to create one of these plots for every game and display them together using &lt;code&gt;facet_wrap()&lt;/code&gt;.&lt;br /&gt;
Let’s create a function again. It’s will be very similar to the game plot function only a few things are different. We will color the odd weeks in the primary color and the even weeks in the secondary color of the players NFL team. We also need to convert &lt;code&gt;week&lt;/code&gt; to factor in order to sort the facets.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot_season_performance &amp;lt;- function(player_id, plot_title) {
  pbp %&amp;gt;%
    filter(receiver_player_id == player_id | rusher_player_id == player_id) %&amp;gt;%
    calc_ff_season() %&amp;gt;%
    arrange(week) %&amp;gt;%
    mutate(
      line_color = ifelse(week %% 2 == 1, primary, secondary),
      week_nr = week,
      week = glue::glue(&amp;quot;Week {week} ({ff_points_total})&amp;quot;)
    ) %&amp;gt;%
    mutate_at(vars(week), funs(factor(., levels = unique(.)))) %&amp;gt;%
    ggplot(aes(time_in_sec, ff_points_sum)) +
    geom_line(aes(color = line_color), size = 1) +
    geom_point(
      shape = 19, color = &amp;quot;red&amp;quot;, size = 2, data = . %&amp;gt;% filter(touchdown == T),
      aes(time_in_sec, ff_points_sum)
    ) +
    geom_point(
      shape = 19, color = &amp;quot;red&amp;quot;, size = 2, data = . %&amp;gt;% filter(touchdown == T),
      aes(time_in_sec, ff_points_sum)
    ) +
    scale_color_identity() +
    facet_wrap(~week) +
    geom_vline(xintercept = c(900, 1800, 2700), alpha = .5, lty = 2) +
    expand_limits(x = c(0, 3600)) +
    scale_x_continuous(labels = NULL, breaks = NULL) +
    theme_hubnr_thin(11) +
    labs(
      title = plot_title,
      x = NULL,
      y = &amp;quot;Fantasy Points&amp;quot;
    ) +
    theme(strip.text.x = element_text(size = 11, face = &amp;quot;plain&amp;quot;))
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we are able to look at performances over a whole season.&lt;/p&gt;
&lt;div id=&#34;christian-mccaffrey&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Christian McCaffrey&lt;/h3&gt;
&lt;p&gt;Without a doubt the most valuable Running Back this season was Christian McCaffrey. Execpt for the previously mentioned Week 2 (and maybe Week 13) he was always great.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot_season_performance(
  &amp;quot;32013030-2d30-3033-3332-3830ec2c3be7&amp;quot;,
  &amp;quot;Christian McCaffrey - Fantasy Football Season 2019&amp;quot;
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-08-18-visualizing-the-best-fantasy-football-performances-of-the-2019-season.en_files/figure-html/unnamed-chunk-12-1.png&#34; width=&#34;2400&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;kenyan-drake&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Kenyan Drake&lt;/h3&gt;
&lt;p&gt;As mentioned earlier Drake had a bad first half, so his season wasn’t that great. I mainly picked him because you can see how the coloring work. Drake was on the Dolphins for the first 8 weeks of the season and after that played for the Cardinals. You can see the coloring of the plot chaning accordingly.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot_season_performance(
  &amp;quot;32013030-2d30-3033-3331-31385a388006&amp;quot;,
  &amp;quot;Kenyan Drake - Fantasy Football Season 2019&amp;quot;
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-08-18-visualizing-the-best-fantasy-football-performances-of-the-2019-season.en_files/figure-html/unnamed-chunk-13-1.png&#34; width=&#34;2400&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;michael-thomas&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Michael Thomas&lt;/h3&gt;
&lt;p&gt;Michael Thomas was the best Wide Receiver for Fantasy in the 2019 season.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot_season_performance(
  &amp;quot;32013030-2d30-3033-3237-36359afa5261&amp;quot;,
  &amp;quot;Michael Thomas - Fantasy Football Season 2019&amp;quot;
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-08-18-visualizing-the-best-fantasy-football-performances-of-the-2019-season.en_files/figure-html/unnamed-chunk-14-1.png&#34; width=&#34;2400&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;travis-kelce&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Travis Kelce&lt;/h3&gt;
&lt;p&gt;Travis Kelce was the best Tight End for Fantasy in the 2019 season.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot_season_performance(
  &amp;quot;32013030-2d30-3033-3035-3036654ef292&amp;quot;,
  &amp;quot;Travis Kelce - Fantasy Football Season 2019&amp;quot;
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-08-18-visualizing-the-best-fantasy-football-performances-of-the-2019-season.en_files/figure-html/unnamed-chunk-15-1.png&#34; width=&#34;2400&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Scraping Counter Strike Match History</title>
      <link>/post/cs-go-scrape/</link>
      <pubDate>Tue, 05 May 2020 00:00:00 +0000</pubDate>
      <guid>/post/cs-go-scrape/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;Seit ein paar Jahren ist Steam verprlichtet alle persönlichen Daten über einen offen zu legen. Das schließt auch einen Spielverlauf mit ein. Über diesen Weg kann man&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Extract Raw Tables
#Every Match Has Two Tables:
#Left Contains Gerneral Information about the Game, e.g. Duration, Map
#Right Contains Information about players, like the ingame Scoreboard

right_html_data &amp;lt;- read_html(&amp;quot;./data/steam_data.html&amp;quot;) %&amp;gt;% 
  html_nodes(&amp;quot;.csgo_scoreboard_inner_right&amp;quot;) %&amp;gt;% 
  html_table()

left_html_data &amp;lt;- read_html(&amp;quot;./data/steam_data.html&amp;quot;) %&amp;gt;% 
  html_nodes(&amp;quot;.csgo_scoreboard_inner_left&amp;quot;) %&amp;gt;% 
  html_table()&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;extract_right_side &amp;lt;- function(right_table) {
  score_extr &amp;lt;- right_table %&amp;gt;% filter(row_number() == 6) %&amp;gt;% pull(Score) %&amp;gt;% 
    str_extract_all(., &amp;quot;\\d+&amp;quot;) #Extract Game Score (Always in Row 6)
  
  right_table %&amp;gt;% 
    as_tibble() %&amp;gt;% 
    rename(mvp = 6) %&amp;gt;% 
    clean_names() %&amp;gt;% 
    mutate(team_id = ifelse(row_number() &amp;lt;= 5,1,2),
         score_t1 = score_extr[[1]][1],
         score_t2 = score_extr[[1]][2],
         mvp = str_replace(mvp, &amp;quot;\\u2605&amp;quot; , &amp;quot;star&amp;quot;),
         mvp = ifelse(mvp == &amp;quot;star&amp;quot;,1, mvp),
         mvp = parse_number(mvp),
         mvp = ifelse(is.na(mvp),0,mvp),
         hsp = parse_number(hsp)) %&amp;gt;% 
    filter(row_number() != 6)
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;extract_left_side &amp;lt;- function(left_table) {
  tibble(map = left_table[1][1,1],
           timestamp = left_table[1][2,1],
           wait_time = str_extract(left_table[1][3,1],&amp;quot;\\d+:\\d+&amp;quot;),
           match_duration = str_extract(left_table[1][4,1],&amp;quot;\\d+:\\d+&amp;quot;)) %&amp;gt;% 
    slice(rep(1:n(), each = 10))
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;right_data &amp;lt;- lapply(right_html_data, extract_right_side) %&amp;gt;% bind_rows()
left_data &amp;lt;- lapply(left_html_data, extract_left_side) %&amp;gt;% bind_rows()

cs_data &amp;lt;- left_data %&amp;gt;%
  bind_cols(right_data) %&amp;gt;%
  mutate(game_id = (row_number() - 1) %/% 10)

cs_data&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 2,210 x 16
##    map   timestamp wait_time match_duration player_name ping  k     a     d    
##    &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;          &amp;lt;chr&amp;gt;       &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;
##  1 Comp~ 2020-05-~ 00:12     32:31          Sergio Mar~ 43    17    5     18   
##  2 Comp~ 2020-05-~ 00:12     32:31          Dadix       45    13    4     21   
##  3 Comp~ 2020-05-~ 00:12     32:31          dex6y       30    10    6     19   
##  4 Comp~ 2020-05-~ 00:12     32:31          duk5x       35    12    0     20   
##  5 Comp~ 2020-05-~ 00:12     32:31          &amp;lt;U+2764&amp;gt; St&amp;lt;U+03AD&amp;gt;fa&amp;lt;U+03BD&amp;gt; -~ 48    10    1     18   
##  6 Comp~ 2020-05-~ 00:12     32:31          /SlasH/     57    26    5     12   
##  7 Comp~ 2020-05-~ 00:12     32:31          ShokoN      31    21    4     13   
##  8 Comp~ 2020-05-~ 00:12     32:31          CERNVNN0S   24    16    4     13   
##  9 Comp~ 2020-05-~ 00:12     32:31          add instag~ 17    17    2     14   
## 10 Comp~ 2020-05-~ 00:12     32:31          Awesome     49    14    2     12   
## # ... with 2,200 more rows, and 7 more variables: mvp &amp;lt;dbl&amp;gt;, hsp &amp;lt;dbl&amp;gt;,
## #   score &amp;lt;chr&amp;gt;, team_id &amp;lt;dbl&amp;gt;, score_t1 &amp;lt;chr&amp;gt;, score_t2 &amp;lt;chr&amp;gt;, game_id &amp;lt;dbl&amp;gt;&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Examining Win Probabilities Playing Maexchen</title>
      <link>/post/maexchen-game/</link>
      <pubDate>Mon, 04 May 2020 00:00:00 +0000</pubDate>
      <guid>/post/maexchen-game/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;Mäxchen is a popular german dice game. It’s not complex at all, so it can be played by everybody from young to old. While playing it during the last family gathering I wondered what the ideal decisions in this game are. It is quite simple and you can pretty much play it instantly but I wanted to know the exact chances of winning for each dice result. In this blogpost I will simulate playing the game and analyze what your chances of winning are. The rules for this game allow you to lie about your result, but we won’t get into that. Lets get started!&lt;/p&gt;
&lt;div id=&#34;brief-game-rules&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Brief Game Rules&lt;/h2&gt;
&lt;p&gt;In this game you roll two dices. The higher dice represents the first digit, the lower one the second digit of your result. For example: 1,3 will get you 31; 2,5 will get you 52; 1,1 will get you 11.&lt;/p&gt;
&lt;p&gt;The best Result one might get is 21 also called &lt;strong&gt;Mäxchen&lt;/strong&gt;. The next highest results are the rolls, where both digits match (11,22,33,etc.) with 66 being the highest and therefore 11 the worst one. After that, the higher your roll the better.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;simulation&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Simulation&lt;/h2&gt;
&lt;p&gt;First we need to simulate the dice rolls. I usually write a function for one simulation, so I will do it here as well:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;roll_game &amp;lt;- function() {
  r1 &amp;lt;- sample(6, 1)
  r2 &amp;lt;- sample(6, 1)

  if (r1 &amp;gt; r2) {
    r1 * 10 + r2
  } else {
    r2 * 10 + r1
  }
}

roll_game()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 32&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;roll_game()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 32&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;roll_game()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 61&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I use the sample-Function to generate the dice rolls. After we generated each dice we need to order it to match the rules of the game. These two steps are all we need to do in order to simulate one roll of the game. Lets expand this to simulate a bunch of games.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;simulation &amp;lt;- tibble(sim = 1:1e6) %&amp;gt;%
  mutate(roll = replicate(n(), roll_game()))

simulation&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1,000,000 x 2
##      sim  roll
##    &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt;
##  1     1    22
##  2     2    32
##  3     3    54
##  4     4    53
##  5     5    54
##  6     6    65
##  7     7    63
##  8     8    31
##  9     9    64
## 10    10    62
## # ... with 999,990 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we have generated a million rolls (in a few seconds).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;order &amp;lt;- c(15, 21, 16, 1, 2, 17, 3, 4, 5, 18, 6, 7, 8, 9, 19, 10, 11, 12, 13, 14, 20)

dist &amp;lt;- simulation %&amp;gt;%
  count(roll) %&amp;gt;%
  mutate(
    prob = n / 1e6,
    roll = as.factor(roll),
    order = order
  ) %&amp;gt;%
  arrange(order)

dist&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 21 x 4
##    roll      n   prob order
##    &amp;lt;fct&amp;gt; &amp;lt;int&amp;gt;  &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
##  1 31    56058 0.0561     1
##  2 32    55932 0.0559     2
##  3 41    55889 0.0559     3
##  4 42    55449 0.0554     4
##  5 43    55083 0.0551     5
##  6 51    55332 0.0553     6
##  7 52    55687 0.0557     7
##  8 53    55580 0.0556     8
##  9 54    55673 0.0557     9
## 10 61    55367 0.0554    10
## # ... with 11 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As explained before the game has a special order in which they results are sorted. The Vector order maps that sequence to the default numerical order, e.g. 31 is the 4th lowest number you can roll but is the worst result you can get in this game (11,21,22 are valued higher). We count the occurence of each dice result.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dist %&amp;gt;%
  mutate(roll = fct_inorder(roll)) %&amp;gt;%
  ggplot(aes(roll, prob)) +
  geom_col(fill = &amp;quot;darkred&amp;quot;) +
  labs(
    title = &amp;quot;Probability Distribution for &amp;#39;Mäxchen&amp;#39;&amp;quot;,
    x = &amp;quot;Result&amp;quot;,
    y = &amp;quot;Probability&amp;quot;
  ) +
  scale_y_continuous(labels = scales::percent_format()) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-05-04-examining-win-probabilities-playing-maexchen_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;2400&#34; /&gt;&lt;/p&gt;
&lt;p&gt;If you think about it, this result was pretty obvious. For every result without equal digits you have two ways of archiving it: first digit on first dice and second digit on second dice or the other way around. If your result has equal digits you only have one. Thus, the exact chance of every result is 5.556% or 2.778% for same digits results.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;beat_prob &amp;lt;- dist %&amp;gt;%
  mutate(
    prob = ifelse(roll %in% c(11, 22, 33, 44, 55, 66), 1 / 36, 2 / 36),
    prob_sum = cumsum(prob),
    beat = 1 - prob_sum
  )
beat_prob&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 21 x 6
##    roll      n   prob order prob_sum  beat
##    &amp;lt;fct&amp;gt; &amp;lt;int&amp;gt;  &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
##  1 31    56058 0.0556     1   0.0556 0.944
##  2 32    55932 0.0556     2   0.111  0.889
##  3 41    55889 0.0556     3   0.167  0.833
##  4 42    55449 0.0556     4   0.222  0.778
##  5 43    55083 0.0556     5   0.278  0.722
##  6 51    55332 0.0556     6   0.333  0.667
##  7 52    55687 0.0556     7   0.389  0.611
##  8 53    55580 0.0556     8   0.444  0.556
##  9 54    55673 0.0556     9   0.5    0.5  
## 10 61    55367 0.0556    10   0.556  0.444
## # ... with 11 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since we now know the exact probability we change our values from the simulation accordingly. We calculate the cumulative sum for every roll. This value represents how likely we roll something worse or as bad as the respective roll. Since we wanna know the probability to beat a roll we have to subtract the calculated probability from 1. Let’s plot the result:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;beat_prob %&amp;gt;%
  mutate(roll = fct_inorder(roll)) %&amp;gt;%
  ggplot(aes(roll, beat)) +
  geom_col(fill = &amp;quot;darkred&amp;quot;) +
  geom_text(aes(label = percent(beat)), family = &amp;quot;Roboto&amp;quot;, vjust = -.8, size = 3) +
  labs(
    title = &amp;quot;Probability of beating a result in &amp;#39;Mäxchen&amp;#39;&amp;quot;,
    x = &amp;quot;Result&amp;quot;,
    y = &amp;quot;Probability&amp;quot;
  ) +
  scale_y_continuous(labels = scales::percent_format()) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-05-04-examining-win-probabilities-playing-maexchen_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;2400&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Admittedly, the result is not that surprising and frankly pretty basic math. Though if you wanna know how good your chances of beating a result are, you can look at this pretty plot from now on.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>About</title>
      <link>/about/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate>
      <guid>/about/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Hello R Markdown</title>
      <link>/post/2015-07-23-r-rmarkdown/</link>
      <pubDate>Thu, 23 Jul 2015 21:13:14 -0500</pubDate>
      <guid>/post/2015-07-23-r-rmarkdown/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;div id=&#34;r-markdown&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;R Markdown&lt;/h1&gt;
&lt;p&gt;This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see &lt;a href=&#34;http://rmarkdown.rstudio.com&#34; class=&#34;uri&#34;&gt;http://rmarkdown.rstudio.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can embed an R code chunk like this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;summary(cars)
##      speed           dist       
##  Min.   : 4.0   Min.   :  2.00  
##  1st Qu.:12.0   1st Qu.: 26.00  
##  Median :15.0   Median : 36.00  
##  Mean   :15.4   Mean   : 42.98  
##  3rd Qu.:19.0   3rd Qu.: 56.00  
##  Max.   :25.0   Max.   :120.00
fit &amp;lt;- lm(dist ~ speed, data = cars)
fit
## 
## Call:
## lm(formula = dist ~ speed, data = cars)
## 
## Coefficients:
## (Intercept)        speed  
##     -17.579        3.932&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;including-plots&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Including Plots&lt;/h1&gt;
&lt;p&gt;You can also embed plots. See Figure &lt;a href=&#34;#fig:pie&#34;&gt;1&lt;/a&gt; for example:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;par(mar = c(0, 1, 0, 1))
pie(
  c(280, 60, 20),
  c(&amp;#39;Sky&amp;#39;, &amp;#39;Sunny side of pyramid&amp;#39;, &amp;#39;Shady side of pyramid&amp;#39;),
  col = c(&amp;#39;#0292D8&amp;#39;, &amp;#39;#F7EA39&amp;#39;, &amp;#39;#C4B632&amp;#39;),
  init.angle = -50, border = NA
)&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span id=&#34;fig:pie&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;/post/2015-07-23-r-rmarkdown_files/figure-html/pie-1.png&#34; alt=&#34;A fancy pie chart.&#34; width=&#34;672&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 1: A fancy pie chart.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
