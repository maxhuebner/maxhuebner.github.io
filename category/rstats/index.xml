<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rstats | Max Hübner</title>
    <link>/category/rstats/</link>
      <atom:link href="/category/rstats/index.xml" rel="self" type="application/rss+xml" />
    <description>rstats</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>© Max Hübner 2020</copyright><lastBuildDate>Tue, 18 Aug 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/images/icon_hubdc61f67c4acee99af4fb8a14828136d_14904_512x512_fill_lanczos_center_2.png</url>
      <title>rstats</title>
      <link>/category/rstats/</link>
    </image>
    
    <item>
      <title>Visualizing the Best Fantasy Football Performances of the 2019 Season</title>
      <link>/post/visualizing-the-best-fantasy-football-performances-of-the-2019-season/</link>
      <pubDate>Tue, 18 Aug 2020 00:00:00 +0000</pubDate>
      <guid>/post/visualizing-the-best-fantasy-football-performances-of-the-2019-season/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;With the Fantasy Football season only a few weeks away, I decided to look back at the 2019 season and the greatest weekly performances.&lt;br /&gt;
In this post I will try to visualize the best weekly performances as well as the performance of the best players over the whole season.&lt;/p&gt;
&lt;div id=&#34;setup&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Setup&lt;/h2&gt;
&lt;p&gt;First, we need data. Since I didn’t have fantasy specific data I thought the easiest way to do this is to calculate the fantasy points from the Play-By-Play Data.&lt;br /&gt;
You can find this and many more great datasets &lt;a href=&#34;https://github.com/guga31bb/nflfastR-data&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pbp &amp;lt;- readRDS(url(&amp;quot;https://raw.githubusercontent.com/guga31bb/nflfastR-data/master/data/play_by_play_2019.rds&amp;quot;))

pbp &amp;lt;- pbp %&amp;gt;%
  filter(
    season_type == &amp;quot;REG&amp;quot;,
    between(week, 1, 16)
  )
pbp&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 43,240 x 333
##    play_id game_id old_game_id home_team away_team season_type  week posteam
##      &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;       &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;       &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;  
##  1       1 2019_0~ 2019090804  MIN       ATL       REG             1 &amp;lt;NA&amp;gt;   
##  2      36 2019_0~ 2019090804  MIN       ATL       REG             1 ATL    
##  3      51 2019_0~ 2019090804  MIN       ATL       REG             1 ATL    
##  4      79 2019_0~ 2019090804  MIN       ATL       REG             1 ATL    
##  5     100 2019_0~ 2019090804  MIN       ATL       REG             1 ATL    
##  6     121 2019_0~ 2019090804  MIN       ATL       REG             1 ATL    
##  7     148 2019_0~ 2019090804  MIN       ATL       REG             1 MIN    
##  8     185 2019_0~ 2019090804  MIN       ATL       REG             1 MIN    
##  9     214 2019_0~ 2019090804  MIN       ATL       REG             1 MIN    
## 10     239 2019_0~ 2019090804  MIN       ATL       REG             1 MIN    
## # ... with 43,230 more rows, and 325 more variables: posteam_type &amp;lt;chr&amp;gt;,
## #   defteam &amp;lt;chr&amp;gt;, side_of_field &amp;lt;chr&amp;gt;, yardline_100 &amp;lt;dbl&amp;gt;, game_date &amp;lt;chr&amp;gt;,
## #   quarter_seconds_remaining &amp;lt;dbl&amp;gt;, half_seconds_remaining &amp;lt;dbl&amp;gt;,
## #   game_seconds_remaining &amp;lt;dbl&amp;gt;, game_half &amp;lt;chr&amp;gt;, quarter_end &amp;lt;dbl&amp;gt;,
## #   drive &amp;lt;dbl&amp;gt;, sp &amp;lt;dbl&amp;gt;, qtr &amp;lt;dbl&amp;gt;, down &amp;lt;dbl&amp;gt;, goal_to_go &amp;lt;dbl&amp;gt;, time &amp;lt;chr&amp;gt;,
## #   yrdln &amp;lt;chr&amp;gt;, ydstogo &amp;lt;dbl&amp;gt;, ydsnet &amp;lt;dbl&amp;gt;, desc &amp;lt;chr&amp;gt;, play_type &amp;lt;chr&amp;gt;,
## #   yards_gained &amp;lt;dbl&amp;gt;, shotgun &amp;lt;dbl&amp;gt;, no_huddle &amp;lt;dbl&amp;gt;, qb_dropback &amp;lt;dbl&amp;gt;,
## #   qb_kneel &amp;lt;dbl&amp;gt;, qb_spike &amp;lt;dbl&amp;gt;, qb_scramble &amp;lt;dbl&amp;gt;, pass_length &amp;lt;chr&amp;gt;,
## #   pass_location &amp;lt;chr&amp;gt;, air_yards &amp;lt;dbl&amp;gt;, yards_after_catch &amp;lt;dbl&amp;gt;,
## #   run_location &amp;lt;chr&amp;gt;, run_gap &amp;lt;chr&amp;gt;, field_goal_result &amp;lt;chr&amp;gt;,
## #   kick_distance &amp;lt;dbl&amp;gt;, extra_point_result &amp;lt;chr&amp;gt;, two_point_conv_result &amp;lt;chr&amp;gt;,
## #   home_timeouts_remaining &amp;lt;dbl&amp;gt;, away_timeouts_remaining &amp;lt;dbl&amp;gt;,
## #   timeout &amp;lt;dbl&amp;gt;, timeout_team &amp;lt;chr&amp;gt;, td_team &amp;lt;chr&amp;gt;,
## #   posteam_timeouts_remaining &amp;lt;dbl&amp;gt;, defteam_timeouts_remaining &amp;lt;dbl&amp;gt;,
## #   total_home_score &amp;lt;dbl&amp;gt;, total_away_score &amp;lt;dbl&amp;gt;, posteam_score &amp;lt;dbl&amp;gt;,
## #   defteam_score &amp;lt;dbl&amp;gt;, score_differential &amp;lt;dbl&amp;gt;, posteam_score_post &amp;lt;dbl&amp;gt;,
## #   defteam_score_post &amp;lt;dbl&amp;gt;, score_differential_post &amp;lt;dbl&amp;gt;,
## #   no_score_prob &amp;lt;dbl&amp;gt;, opp_fg_prob &amp;lt;dbl&amp;gt;, opp_safety_prob &amp;lt;dbl&amp;gt;,
## #   opp_td_prob &amp;lt;dbl&amp;gt;, fg_prob &amp;lt;dbl&amp;gt;, safety_prob &amp;lt;dbl&amp;gt;, td_prob &amp;lt;dbl&amp;gt;,
## #   extra_point_prob &amp;lt;dbl&amp;gt;, two_point_conversion_prob &amp;lt;dbl&amp;gt;, ep &amp;lt;dbl&amp;gt;,
## #   epa &amp;lt;dbl&amp;gt;, total_home_epa &amp;lt;dbl&amp;gt;, total_away_epa &amp;lt;dbl&amp;gt;,
## #   total_home_rush_epa &amp;lt;dbl&amp;gt;, total_away_rush_epa &amp;lt;dbl&amp;gt;,
## #   total_home_pass_epa &amp;lt;dbl&amp;gt;, total_away_pass_epa &amp;lt;dbl&amp;gt;, air_epa &amp;lt;dbl&amp;gt;,
## #   yac_epa &amp;lt;dbl&amp;gt;, comp_air_epa &amp;lt;dbl&amp;gt;, comp_yac_epa &amp;lt;dbl&amp;gt;,
## #   total_home_comp_air_epa &amp;lt;dbl&amp;gt;, total_away_comp_air_epa &amp;lt;dbl&amp;gt;,
## #   total_home_comp_yac_epa &amp;lt;dbl&amp;gt;, total_away_comp_yac_epa &amp;lt;dbl&amp;gt;,
## #   total_home_raw_air_epa &amp;lt;dbl&amp;gt;, total_away_raw_air_epa &amp;lt;dbl&amp;gt;,
## #   total_home_raw_yac_epa &amp;lt;dbl&amp;gt;, total_away_raw_yac_epa &amp;lt;dbl&amp;gt;, wp &amp;lt;dbl&amp;gt;,
## #   def_wp &amp;lt;dbl&amp;gt;, home_wp &amp;lt;dbl&amp;gt;, away_wp &amp;lt;dbl&amp;gt;, wpa &amp;lt;dbl&amp;gt;, home_wp_post &amp;lt;dbl&amp;gt;,
## #   away_wp_post &amp;lt;dbl&amp;gt;, vegas_wp &amp;lt;dbl&amp;gt;, vegas_home_wp &amp;lt;dbl&amp;gt;,
## #   total_home_rush_wpa &amp;lt;dbl&amp;gt;, total_away_rush_wpa &amp;lt;dbl&amp;gt;,
## #   total_home_pass_wpa &amp;lt;dbl&amp;gt;, total_away_pass_wpa &amp;lt;dbl&amp;gt;, air_wpa &amp;lt;dbl&amp;gt;,
## #   yac_wpa &amp;lt;dbl&amp;gt;, comp_air_wpa &amp;lt;dbl&amp;gt;, comp_yac_wpa &amp;lt;dbl&amp;gt;,
## #   total_home_comp_air_wpa &amp;lt;dbl&amp;gt;, ...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We now have every play of the 2019 NFL season! The dataset is missing fantasy points, so we need to calculate them for the game we are interested in. Since we will reuse this calculation a lot, it’s best to write a function. I will call it &lt;em&gt;calc_ff&lt;/em&gt;:&lt;br /&gt;
You can use &lt;code&gt;. %&amp;gt;%&lt;/code&gt; to create a anonymous function. The function calculates the time, that has progressed since the start of a game in seconds, in order to sort it by this variable. This is necessary because we will use &lt;code&gt;accumulate()&lt;/code&gt; to sum up the plays shortly.&lt;br /&gt;
After that we will calculate the points. Every yards gained equals a tenth of a point, touchdowns give 6 points, if you fumble you will lose 2 points. This calculation is for the &lt;em&gt;.5PPR&lt;/em&gt; format, so each reception will give you half a point. You get 2 points for a successful Two-Point-Conversion.&lt;br /&gt;
After that, we accumulate the independent plays in order to get the total fantasy points up to that point.&lt;br /&gt;
Lastly, I used the relatively new but awesome function &lt;code&gt;relocate()&lt;/code&gt; to display the points in front. We will also create a function to calculate for the whole season.&lt;br /&gt;
&lt;em&gt;(Note: This calculation will only work for skill positions, if you would like to analyze Quaterbacks you have to change the function a bit)&lt;/em&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;calc_ff &amp;lt;- . %&amp;gt;%
  arrange(desc(game_seconds_remaining)) %&amp;gt;%
  mutate(time_in_sec = 3600 - game_seconds_remaining) %&amp;gt;%
  mutate(
    ff_points = yards_gained / 10,
    ff_points = ifelse(touchdown, ff_points + 6, ff_points),
    ff_points = ifelse(fumble_lost, ff_points - 2, ff_points),
    ff_points = ifelse(play_type == &amp;quot;pass&amp;quot; &amp;amp; complete_pass, ff_points + .5, ff_points),
    ff_points = ifelse(two_point_attempt &amp;amp; two_point_conv_result == &amp;quot;success&amp;quot;, 2, ff_points),
    ff_points_sum = accumulate(ff_points, sum),
    ff_points_total = last(ff_points_sum)
  ) %&amp;gt;%
  relocate(contains(&amp;quot;ff_points&amp;quot;), .before = play_id)

calc_ff_season &amp;lt;- . %&amp;gt;%
  group_by(game_date) %&amp;gt;%
  calc_ff() %&amp;gt;%
  ungroup()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Visualization for NFl related things is a perfect opportunity to try out the package &lt;em&gt;teamcolors&lt;/em&gt;.&lt;br /&gt;
There is a little bit of setup required to get it to work with our data&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(teamcolors)

# Unfortunately Play-By-Play Data uses Abbreviations while Teamcolors uses full names
team_abbr &amp;lt;- tribble(
  ~name, ~team_code,
  &amp;quot;Arizona Cardinals&amp;quot;, &amp;quot;ARI&amp;quot;,
  &amp;quot;Atlanta Falcons&amp;quot;, &amp;quot;ATL&amp;quot;,
  &amp;quot;Baltimore Ravens&amp;quot;, &amp;quot;BAL&amp;quot;,
  &amp;quot;Buffalo Bills&amp;quot;, &amp;quot;BUF&amp;quot;,
  &amp;quot;Carolina Panthers&amp;quot;, &amp;quot;CAR&amp;quot;,
  &amp;quot;Chicago Bears&amp;quot;, &amp;quot;CHI&amp;quot;,
  &amp;quot;Cincinnati Bengals&amp;quot;, &amp;quot;CIN&amp;quot;,
  &amp;quot;Cleveland Browns&amp;quot;, &amp;quot;CLE&amp;quot;,
  &amp;quot;Dallas Cowboys&amp;quot;, &amp;quot;DAL&amp;quot;,
  &amp;quot;Denver Broncos&amp;quot;, &amp;quot;DEN&amp;quot;,
  &amp;quot;Detroit Lions&amp;quot;, &amp;quot;DET&amp;quot;,
  &amp;quot;Green Bay Packers&amp;quot;, &amp;quot;GB&amp;quot;,
  &amp;quot;Houston Texans&amp;quot;, &amp;quot;HOU&amp;quot;,
  &amp;quot;Indianapolis Colts&amp;quot;, &amp;quot;IND&amp;quot;,
  &amp;quot;Jacksonville Jaguars&amp;quot;, &amp;quot;JAX&amp;quot;,
  &amp;quot;Kansas City Chiefs&amp;quot;, &amp;quot;KC&amp;quot;,
  &amp;quot;Los Angeles Chargers&amp;quot;, &amp;quot;LAC&amp;quot;,
  &amp;quot;Los Angeles Rams&amp;quot;, &amp;quot;LA&amp;quot;,
  &amp;quot;Miami Dolphins&amp;quot;, &amp;quot;MIA&amp;quot;,
  &amp;quot;Minnesota Vikings&amp;quot;, &amp;quot;MIN&amp;quot;,
  &amp;quot;New England Patriots&amp;quot;, &amp;quot;NE&amp;quot;,
  &amp;quot;New Orleans Saints&amp;quot;, &amp;quot;NO&amp;quot;,
  &amp;quot;New York Giants&amp;quot;, &amp;quot;NYG&amp;quot;,
  &amp;quot;New York Jets&amp;quot;, &amp;quot;NYJ&amp;quot;,
  &amp;quot;Oakland Raiders&amp;quot;, &amp;quot;LV&amp;quot;,
  &amp;quot;Philadelphia Eagles&amp;quot;, &amp;quot;PHI&amp;quot;,
  &amp;quot;Pittsburgh Steelers&amp;quot;, &amp;quot;PIT&amp;quot;,
  &amp;quot;San Francisco 49ers&amp;quot;, &amp;quot;SF&amp;quot;,
  &amp;quot;Seattle Seahawks&amp;quot;, &amp;quot;SEA&amp;quot;,
  &amp;quot;Tampa Bay Buccaneers&amp;quot;, &amp;quot;TB&amp;quot;,
  &amp;quot;Tennessee Titans&amp;quot;, &amp;quot;TEN&amp;quot;,
  &amp;quot;Washington Redskins&amp;quot;, &amp;quot;WAS&amp;quot;
)

teamcols &amp;lt;- filter(teamcolors, league == &amp;quot;nfl&amp;quot;) %&amp;gt;%
  left_join(team_abbr, by = &amp;quot;name&amp;quot;) %&amp;gt;%
  select(team_code, name, primary, secondary, logo)

teamcols&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 32 x 5
##    team_code name        primary secondary logo                                 
##    &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;       &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;                                
##  1 ARI       Arizona Ca~ #97233f #000000   http://content.sportslogos.net/logos~
##  2 ATL       Atlanta Fa~ #a71930 #000000   http://content.sportslogos.net/logos~
##  3 BAL       Baltimore ~ #241773 #000000   http://content.sportslogos.net/logos~
##  4 BUF       Buffalo Bi~ #00338d #c60c30   http://content.sportslogos.net/logos~
##  5 CAR       Carolina P~ #0085ca #000000   http://content.sportslogos.net/logos~
##  6 CHI       Chicago Be~ #0b162a #c83803   http://content.sportslogos.net/logos~
##  7 CIN       Cincinnati~ #000000 #fb4f14   http://content.sportslogos.net/logos~
##  8 CLE       Cleveland ~ #fb4f14 #22150c   http://content.sportslogos.net/logos~
##  9 DAL       Dallas Cow~ #002244 #b0b7bc   http://content.sportslogos.net/logos~
## 10 DEN       Denver Bro~ #002244 #fb4f14   http://content.sportslogos.net/logos~
## # ... with 22 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that we have the team abbreviations we can join with our dataset:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pbp &amp;lt;- pbp %&amp;gt;% left_join(teamcols, by = c(&amp;quot;posteam&amp;quot; = &amp;quot;team_code&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We are finally ready to do some visualization.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;visualization-of-weekly-perfomances&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Visualization of weekly perfomances&lt;/h2&gt;
&lt;p&gt;As discussed earlier in this post, we will reuse the same plot a few times, so we should just write a function for it. We want to plot the performance of a player for a given week so those will be our arguments along with a plot title.&lt;br /&gt;
I also would like to make the graph interactive, using the &lt;em&gt;plotly&lt;/em&gt; package.&lt;br /&gt;
First we filter out only the plays for our player (using his id) and the given week. The dataset now only contains plays from the specified week, where the player was involved as a receiver or runner, so on this data we can run our function to calculate his fantasy points.&lt;br /&gt;
&lt;code&gt;text_disp&lt;/code&gt; will contain the text, that we want to display if you hover over an event. Events are either a Touchdown, which we will display as a red dot or a fumble, which will be a black dot.&lt;br /&gt;
The Line, that shows the Fantasy Points over Game Time will be colored in the primary color of the players team.&lt;br /&gt;
Each quater will be seperated by a dashed &lt;em&gt;vline&lt;/em&gt;. The rest of the code is necessary so that plotly won’t display labels for the time axis.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Edit&lt;/strong&gt;: Unfortunately Plotly does not seem to work in this environment, Plotly Plot will display, but in completely wrong dimensions. Therefore I will comment out the Plotly Part. The Rest won’t be changed so you could just run &lt;code&gt;ggplotly(p, tooltip = &#34;text&#34;)&lt;/code&gt; on your plot.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# library(plotly)

plot_week_performance &amp;lt;- function(player_id, week_nr, plot_title) {
  p &amp;lt;- pbp %&amp;gt;%
    filter(
      receiver_player_id == player_id | rusher_player_id == player_id,
      week == week_nr
    ) %&amp;gt;%
    calc_ff() %&amp;gt;%
    arrange(time_in_sec) %&amp;gt;%
    mutate(text_disp = glue::glue(&amp;quot;Quater: {qtr}\nDrive: {drive}\nTime: {time}\n\nScore\n{away_team}: {total_away_score}\n{home_team}: {total_home_score}\n&amp;quot;)) %&amp;gt;%
    ggplot(aes(time_in_sec, ff_points_sum, color = primary)) +
    geom_line(size = 1) +
    geom_point(
      shape = 19, color = &amp;quot;red&amp;quot;, size = 2, data = . %&amp;gt;% filter(touchdown == T),
      aes(time_in_sec, ff_points_sum, text = text_disp)
    ) +
    geom_point(
      shape = 19, color = &amp;quot;black&amp;quot;, size = 2, data = . %&amp;gt;% filter(fumble == T),
      aes(time_in_sec, ff_points_sum, text = text_disp)
    ) +
    geom_vline(xintercept = c(900, 1800, 2700), alpha = .5, lty = 2) +
    expand_limits(x = c(0, 3600)) +
    scale_x_continuous(labels = NULL, breaks = NULL) +
    scale_color_identity() +
    theme_hubnr_thin() +
    labs(
      title = plot_title,
      x = &amp;quot;Time&amp;quot;,
      y = &amp;quot;Fantasy Points&amp;quot;
    ) +
    theme(
      legend.position = &amp;quot;none&amp;quot;,
      axis.ticks.x = element_blank(),
      axis.text.x = element_blank()
    )

  # ggplotly(p, tooltip = &amp;quot;text&amp;quot;)
  p
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that we have our plot generating function, we should test it on some of the best fantasy performances of the last season.&lt;br /&gt;
In order to get results you need a player_id, which you can get by filtering the dataset for the specific player (Hint: Kenyan Drake would be ‘K.Drake’). I will omit this step for this post.&lt;/p&gt;
&lt;div id=&#34;kenyan-drake---week-15-and-16&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Kenyan Drake - Week 15 (and 16)&lt;/h3&gt;
&lt;p&gt;Let’s start with Kenyan Drake. After a disappointing first half of the season on the Miami Dolphins, Drake got traded to the Arizona Cardinals, where he became fantasy gold immediatly. Especially his performances in the Fantasy Football playoffs made Kenyan Drake a &lt;em&gt;League Winner&lt;/em&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot_week_performance(
  &amp;quot;32013030-2d30-3033-3331-31385a388006&amp;quot;, 15,
  &amp;quot;Kenyan Drake - Week 15&amp;quot;
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-08-18-visualizing-the-best-fantasy-football-performances-of-the-2019-season.en_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;2400&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot_week_performance(
  &amp;quot;32013030-2d30-3033-3331-31385a388006&amp;quot;, 16,
  &amp;quot;Kenyan Drake - Week 16&amp;quot;
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-08-18-visualizing-the-best-fantasy-football-performances-of-the-2019-season.en_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;2400&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;christian-mccaffrey---week-1&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Christian McCaffrey - Week 1&lt;/h3&gt;
&lt;p&gt;McCaffrey was awesome the whole season long (execpt week 2). He started the season off with an incredible performance, racking up 42.9 fantasy points. The insane thing about McCaffreys season is, that this wasn’t even his best fantasy performance (47.7 pts - Week 5 vs. Jax).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot_week_performance(
  &amp;quot;32013030-2d30-3033-3332-3830ec2c3be7&amp;quot;, 1,
  &amp;quot;Christian McCaffreye - Week 1&amp;quot;
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-08-18-visualizing-the-best-fantasy-football-performances-of-the-2019-season.en_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;2400&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;aaron-jones---week-5&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Aaron Jones - Week 5&lt;/h3&gt;
&lt;p&gt;Aaron Jones performance in Week 5 was spectacular. He was the running back, that scored the most points in a single game this season.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot_week_performance(
  &amp;quot;32013030-2d30-3033-3332-3933ed82c0de&amp;quot;, 5,
  &amp;quot;Aaron Jones - Week 5&amp;quot;
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-08-18-visualizing-the-best-fantasy-football-performances-of-the-2019-season.en_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;2400&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;sammy-watkins---week-1&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Sammy Watkins - Week 1&lt;/h3&gt;
&lt;p&gt;Similar to McCaffrey, Sammy Watkins hat an unbelivable first week, scoring 46.8 points! Unfortuantely, unlike McCaffrey, he could not reproduce a similar performance again. In fact, Watkins Week 1 performance contributed more than a quater of his total points this season.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot_week_performance(
  &amp;quot;32013030-2d30-3033-3133-32353107e672&amp;quot;, 1,
  &amp;quot;Sammy Watkins - Week 1&amp;quot;
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-08-18-visualizing-the-best-fantasy-football-performances-of-the-2019-season.en_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;2400&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;will-fuller---week-5&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Will Fuller - Week 5&lt;/h3&gt;
&lt;p&gt;Similar to Watkins, Fuller also had one week, that outshined the rest of his season by a mile. He scored the most fantasy points in a game for a Wide Receiver this Year (53.7)&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot_week_performance(
  &amp;quot;32013030-2d30-3033-3331-3237332aee05&amp;quot;, 5,
  &amp;quot;Will Fuller - Week 5&amp;quot;
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-08-18-visualizing-the-best-fantasy-football-performances-of-the-2019-season.en_files/figure-html/unnamed-chunk-10-1.png&#34; width=&#34;2400&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;visualization-of-season-perfomance&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Visualization of season perfomance&lt;/h2&gt;
&lt;p&gt;Now that we looked at individual games, let’s have a look at the whole season of a player.&lt;br /&gt;
To do that we need to create one of these plots for every game and display them together using &lt;code&gt;facet_wrap()&lt;/code&gt;.&lt;br /&gt;
Let’s create a function again. It’s will be very similar to the game plot function only a few things are different. We will color the odd weeks in the primary color and the even weeks in the secondary color of the players NFL team. We also need to convert &lt;code&gt;week&lt;/code&gt; to factor in order to sort the facets.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot_season_performance &amp;lt;- function(player_id, plot_title) {
  pbp %&amp;gt;%
    filter(receiver_player_id == player_id | rusher_player_id == player_id) %&amp;gt;%
    calc_ff_season() %&amp;gt;%
    arrange(week) %&amp;gt;%
    mutate(
      line_color = ifelse(week %% 2 == 1, primary, secondary),
      week_nr = week,
      week = glue::glue(&amp;quot;Week {week} ({ff_points_total})&amp;quot;)
    ) %&amp;gt;%
    mutate_at(vars(week), funs(factor(., levels = unique(.)))) %&amp;gt;%
    ggplot(aes(time_in_sec, ff_points_sum)) +
    geom_line(aes(color = line_color), size = 1) +
    geom_point(
      shape = 19, color = &amp;quot;red&amp;quot;, size = 2, data = . %&amp;gt;% filter(touchdown == T),
      aes(time_in_sec, ff_points_sum)
    ) +
    geom_point(
      shape = 19, color = &amp;quot;red&amp;quot;, size = 2, data = . %&amp;gt;% filter(touchdown == T),
      aes(time_in_sec, ff_points_sum)
    ) +
    scale_color_identity() +
    facet_wrap(~week) +
    geom_vline(xintercept = c(900, 1800, 2700), alpha = .5, lty = 2) +
    expand_limits(x = c(0, 3600)) +
    scale_x_continuous(labels = NULL, breaks = NULL) +
    theme_hubnr_thin(11) +
    labs(
      title = plot_title,
      x = NULL,
      y = &amp;quot;Fantasy Points&amp;quot;
    ) +
    theme(strip.text.x = element_text(size = 11, face = &amp;quot;plain&amp;quot;))
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we are able to look at performances over a whole season.&lt;/p&gt;
&lt;div id=&#34;christian-mccaffrey&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Christian McCaffrey&lt;/h3&gt;
&lt;p&gt;Without a doubt the most valuable Running Back this season was Christian McCaffrey. Execpt for the previously mentioned Week 2 (and maybe Week 13) he was always great.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot_season_performance(
  &amp;quot;32013030-2d30-3033-3332-3830ec2c3be7&amp;quot;,
  &amp;quot;Christian McCaffrey - Fantasy Football Season 2019&amp;quot;
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-08-18-visualizing-the-best-fantasy-football-performances-of-the-2019-season.en_files/figure-html/unnamed-chunk-12-1.png&#34; width=&#34;2400&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;kenyan-drake&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Kenyan Drake&lt;/h3&gt;
&lt;p&gt;As mentioned earlier Drake had a bad first half, so his season wasn’t that great. I mainly picked him because you can see how the coloring work. Drake was on the Dolphins for the first 8 weeks of the season and after that played for the Cardinals. You can see the coloring of the plot chaning accordingly.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot_season_performance(
  &amp;quot;32013030-2d30-3033-3331-31385a388006&amp;quot;,
  &amp;quot;Kenyan Drake - Fantasy Football Season 2019&amp;quot;
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-08-18-visualizing-the-best-fantasy-football-performances-of-the-2019-season.en_files/figure-html/unnamed-chunk-13-1.png&#34; width=&#34;2400&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;michael-thomas&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Michael Thomas&lt;/h3&gt;
&lt;p&gt;Michael Thomas was the best Wide Receiver for Fantasy in the 2019 season.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot_season_performance(
  &amp;quot;32013030-2d30-3033-3237-36359afa5261&amp;quot;,
  &amp;quot;Michael Thomas - Fantasy Football Season 2019&amp;quot;
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-08-18-visualizing-the-best-fantasy-football-performances-of-the-2019-season.en_files/figure-html/unnamed-chunk-14-1.png&#34; width=&#34;2400&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;travis-kelce&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Travis Kelce&lt;/h3&gt;
&lt;p&gt;Travis Kelce was the best Tight End for Fantasy in the 2019 season.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot_season_performance(
  &amp;quot;32013030-2d30-3033-3035-3036654ef292&amp;quot;,
  &amp;quot;Travis Kelce - Fantasy Football Season 2019&amp;quot;
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-08-18-visualizing-the-best-fantasy-football-performances-of-the-2019-season.en_files/figure-html/unnamed-chunk-15-1.png&#34; width=&#34;2400&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Scraping Counter Strike Match History</title>
      <link>/post/cs-go-scrape/</link>
      <pubDate>Tue, 05 May 2020 00:00:00 +0000</pubDate>
      <guid>/post/cs-go-scrape/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;Seit ein paar Jahren ist Steam verprlichtet alle persönlichen Daten über einen offen zu legen. Das schließt auch einen Spielverlauf mit ein. Über diesen Weg kann man&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Extract Raw Tables
#Every Match Has Two Tables:
#Left Contains Gerneral Information about the Game, e.g. Duration, Map
#Right Contains Information about players, like the ingame Scoreboard

right_html_data &amp;lt;- read_html(&amp;quot;./data/steam_data.html&amp;quot;) %&amp;gt;% 
  html_nodes(&amp;quot;.csgo_scoreboard_inner_right&amp;quot;) %&amp;gt;% 
  html_table()

left_html_data &amp;lt;- read_html(&amp;quot;./data/steam_data.html&amp;quot;) %&amp;gt;% 
  html_nodes(&amp;quot;.csgo_scoreboard_inner_left&amp;quot;) %&amp;gt;% 
  html_table()&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;extract_right_side &amp;lt;- function(right_table) {
  score_extr &amp;lt;- right_table %&amp;gt;% filter(row_number() == 6) %&amp;gt;% pull(Score) %&amp;gt;% 
    str_extract_all(., &amp;quot;\\d+&amp;quot;) #Extract Game Score (Always in Row 6)
  
  right_table %&amp;gt;% 
    as_tibble() %&amp;gt;% 
    rename(mvp = 6) %&amp;gt;% 
    clean_names() %&amp;gt;% 
    mutate(team_id = ifelse(row_number() &amp;lt;= 5,1,2),
         score_t1 = score_extr[[1]][1],
         score_t2 = score_extr[[1]][2],
         mvp = str_replace(mvp, &amp;quot;\\u2605&amp;quot; , &amp;quot;star&amp;quot;),
         mvp = ifelse(mvp == &amp;quot;star&amp;quot;,1, mvp),
         mvp = parse_number(mvp),
         mvp = ifelse(is.na(mvp),0,mvp),
         hsp = parse_number(hsp)) %&amp;gt;% 
    filter(row_number() != 6)
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;extract_left_side &amp;lt;- function(left_table) {
  tibble(map = left_table[1][1,1],
           timestamp = left_table[1][2,1],
           wait_time = str_extract(left_table[1][3,1],&amp;quot;\\d+:\\d+&amp;quot;),
           match_duration = str_extract(left_table[1][4,1],&amp;quot;\\d+:\\d+&amp;quot;)) %&amp;gt;% 
    slice(rep(1:n(), each = 10))
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;right_data &amp;lt;- lapply(right_html_data, extract_right_side) %&amp;gt;% bind_rows()
left_data &amp;lt;- lapply(left_html_data, extract_left_side) %&amp;gt;% bind_rows()

cs_data &amp;lt;- left_data %&amp;gt;%
  bind_cols(right_data) %&amp;gt;%
  mutate(game_id = (row_number() - 1) %/% 10)

cs_data&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 2,210 x 16
##    map   timestamp wait_time match_duration player_name ping  k     a     d    
##    &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;          &amp;lt;chr&amp;gt;       &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;
##  1 Comp~ 2020-05-~ 00:12     32:31          Sergio Mar~ 43    17    5     18   
##  2 Comp~ 2020-05-~ 00:12     32:31          Dadix       45    13    4     21   
##  3 Comp~ 2020-05-~ 00:12     32:31          dex6y       30    10    6     19   
##  4 Comp~ 2020-05-~ 00:12     32:31          duk5x       35    12    0     20   
##  5 Comp~ 2020-05-~ 00:12     32:31          &amp;lt;U+2764&amp;gt; St&amp;lt;U+03AD&amp;gt;fa&amp;lt;U+03BD&amp;gt; -~ 48    10    1     18   
##  6 Comp~ 2020-05-~ 00:12     32:31          /SlasH/     57    26    5     12   
##  7 Comp~ 2020-05-~ 00:12     32:31          ShokoN      31    21    4     13   
##  8 Comp~ 2020-05-~ 00:12     32:31          CERNVNN0S   24    16    4     13   
##  9 Comp~ 2020-05-~ 00:12     32:31          add instag~ 17    17    2     14   
## 10 Comp~ 2020-05-~ 00:12     32:31          Awesome     49    14    2     12   
## # ... with 2,200 more rows, and 7 more variables: mvp &amp;lt;dbl&amp;gt;, hsp &amp;lt;dbl&amp;gt;,
## #   score &amp;lt;chr&amp;gt;, team_id &amp;lt;dbl&amp;gt;, score_t1 &amp;lt;chr&amp;gt;, score_t2 &amp;lt;chr&amp;gt;, game_id &amp;lt;dbl&amp;gt;&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Examining Win Probabilities Playing Maexchen</title>
      <link>/post/maexchen-game/</link>
      <pubDate>Mon, 04 May 2020 00:00:00 +0000</pubDate>
      <guid>/post/maexchen-game/</guid>
      <description>
&lt;script src=&#34;/rmarkdown-libs/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;Mäxchen is a popular german dice game. It’s not complex at all, so it can be played by everybody from young to old. While playing it during the last family gathering I wondered what the ideal decisions in this game are. It is quite simple and you can pretty much play it instantly but I wanted to know the exact chances of winning for each dice result. In this blogpost I will simulate playing the game and analyze what your chances of winning are. The rules for this game allow you to lie about your result, but we won’t get into that. Lets get started!&lt;/p&gt;
&lt;div id=&#34;brief-game-rules&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Brief Game Rules&lt;/h2&gt;
&lt;p&gt;In this game you roll two dices. The higher dice represents the first digit, the lower one the second digit of your result. For example: 1,3 will get you 31; 2,5 will get you 52; 1,1 will get you 11.&lt;/p&gt;
&lt;p&gt;The best Result one might get is 21 also called &lt;strong&gt;Mäxchen&lt;/strong&gt;. The next highest results are the rolls, where both digits match (11,22,33,etc.) with 66 being the highest and therefore 11 the worst one. After that, the higher your roll the better.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;simulation&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Simulation&lt;/h2&gt;
&lt;p&gt;First we need to simulate the dice rolls. I usually write a function for one simulation, so I will do it here as well:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;roll_game &amp;lt;- function() {
  r1 &amp;lt;- sample(6, 1)
  r2 &amp;lt;- sample(6, 1)

  if (r1 &amp;gt; r2) {
    r1 * 10 + r2
  } else {
    r2 * 10 + r1
  }
}

roll_game()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 32&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;roll_game()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 32&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;roll_game()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 61&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I use the sample-Function to generate the dice rolls. After we generated each dice we need to order it to match the rules of the game. These two steps are all we need to do in order to simulate one roll of the game. Lets expand this to simulate a bunch of games.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;simulation &amp;lt;- tibble(sim = 1:1e6) %&amp;gt;%
  mutate(roll = replicate(n(), roll_game()))

simulation&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1,000,000 x 2
##      sim  roll
##    &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt;
##  1     1    22
##  2     2    32
##  3     3    54
##  4     4    53
##  5     5    54
##  6     6    65
##  7     7    63
##  8     8    31
##  9     9    64
## 10    10    62
## # ... with 999,990 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we have generated a million rolls (in a few seconds).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;order &amp;lt;- c(15, 21, 16, 1, 2, 17, 3, 4, 5, 18, 6, 7, 8, 9, 19, 10, 11, 12, 13, 14, 20)

dist &amp;lt;- simulation %&amp;gt;%
  count(roll) %&amp;gt;%
  mutate(
    prob = n / 1e6,
    roll = as.factor(roll),
    order = order
  ) %&amp;gt;%
  arrange(order)

dist&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 21 x 4
##    roll      n   prob order
##    &amp;lt;fct&amp;gt; &amp;lt;int&amp;gt;  &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
##  1 31    56058 0.0561     1
##  2 32    55932 0.0559     2
##  3 41    55889 0.0559     3
##  4 42    55449 0.0554     4
##  5 43    55083 0.0551     5
##  6 51    55332 0.0553     6
##  7 52    55687 0.0557     7
##  8 53    55580 0.0556     8
##  9 54    55673 0.0557     9
## 10 61    55367 0.0554    10
## # ... with 11 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As explained before the game has a special order in which they results are sorted. The Vector order maps that sequence to the default numerical order, e.g. 31 is the 4th lowest number you can roll but is the worst result you can get in this game (11,21,22 are valued higher). We count the occurence of each dice result.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dist %&amp;gt;%
  mutate(roll = fct_inorder(roll)) %&amp;gt;%
  ggplot(aes(roll, prob)) +
  geom_col(fill = &amp;quot;darkred&amp;quot;) +
  labs(
    title = &amp;quot;Probability Distribution for &amp;#39;Mäxchen&amp;#39;&amp;quot;,
    x = &amp;quot;Result&amp;quot;,
    y = &amp;quot;Probability&amp;quot;
  ) +
  scale_y_continuous(labels = scales::percent_format()) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-05-04-examining-win-probabilities-playing-maexchen_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;2400&#34; /&gt;&lt;/p&gt;
&lt;p&gt;If you think about it, this result was pretty obvious. For every result without equal digits you have two ways of archiving it: first digit on first dice and second digit on second dice or the other way around. If your result has equal digits you only have one. Thus, the exact chance of every result is 5.556% or 2.778% for same digits results.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;beat_prob &amp;lt;- dist %&amp;gt;%
  mutate(
    prob = ifelse(roll %in% c(11, 22, 33, 44, 55, 66), 1 / 36, 2 / 36),
    prob_sum = cumsum(prob),
    beat = 1 - prob_sum
  )
beat_prob&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 21 x 6
##    roll      n   prob order prob_sum  beat
##    &amp;lt;fct&amp;gt; &amp;lt;int&amp;gt;  &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
##  1 31    56058 0.0556     1   0.0556 0.944
##  2 32    55932 0.0556     2   0.111  0.889
##  3 41    55889 0.0556     3   0.167  0.833
##  4 42    55449 0.0556     4   0.222  0.778
##  5 43    55083 0.0556     5   0.278  0.722
##  6 51    55332 0.0556     6   0.333  0.667
##  7 52    55687 0.0556     7   0.389  0.611
##  8 53    55580 0.0556     8   0.444  0.556
##  9 54    55673 0.0556     9   0.5    0.5  
## 10 61    55367 0.0556    10   0.556  0.444
## # ... with 11 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since we now know the exact probability we change our values from the simulation accordingly. We calculate the cumulative sum for every roll. This value represents how likely we roll something worse or as bad as the respective roll. Since we wanna know the probability to beat a roll we have to subtract the calculated probability from 1. Let’s plot the result:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;beat_prob %&amp;gt;%
  mutate(roll = fct_inorder(roll)) %&amp;gt;%
  ggplot(aes(roll, beat)) +
  geom_col(fill = &amp;quot;darkred&amp;quot;) +
  geom_text(aes(label = percent(beat)), family = &amp;quot;Roboto&amp;quot;, vjust = -.8, size = 3) +
  labs(
    title = &amp;quot;Probability of beating a result in &amp;#39;Mäxchen&amp;#39;&amp;quot;,
    x = &amp;quot;Result&amp;quot;,
    y = &amp;quot;Probability&amp;quot;
  ) +
  scale_y_continuous(labels = scales::percent_format()) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-05-04-examining-win-probabilities-playing-maexchen_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;2400&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Admittedly, the result is not that surprising and frankly pretty basic math. Though if you wanna know how good your chances of beating a result are, you can look at this pretty plot from now on.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
